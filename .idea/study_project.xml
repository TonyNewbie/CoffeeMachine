<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="What can be better than a cup of coffee during a break? A coffee that you don’t have to make yourself. It’s enough to press a couple of buttons on the machine and you get a cup of energy; but first, we should teach the machine how to do it. In this project, you will work on programming a coffee machine simulator. The machine works with typical products: coffee, milk, sugar, and plastic cups; if it runs out of something, it shows a notification. You can get three types of coffee: espresso, cappuccino, and latte. Since nothing’s for free, it also collects the money.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/68&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="Coffee Machine" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="366" />
                <option name="stepId" value="5790" />
                <option name="title" value="Hello, coffee!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="367" />
                <option name="stepId" value="5791" />
                <option name="title" value="Machines have needs" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="368" />
                <option name="stepId" value="5792" />
                <option name="title" value="Enough coffee for everyone" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="369" />
                <option name="stepId" value="5793" />
                <option name="title" value="Action!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="370" />
                <option name="stepId" value="5794" />
                <option name="title" value="On a coffee loop" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="371" />
                <option name="stepId" value="5795" />
                <option name="title" value="Brush your code" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="333" />
                      <option name="theoryId" value="5204" />
                      <option name="title" value="Introduction to Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="336" />
                      <option name="theoryId" value="5208" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="335" />
                      <option name="theoryId" value="5233" />
                      <option name="title" value="Multi-line programs" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="402" />
                      <option name="theoryId" value="5879" />
                      <option name="title" value="PEP 8" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="403" />
                      <option name="theoryId" value="6081" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="394" />
                      <option name="theoryId" value="5852" />
                      <option name="title" value="Basic data types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="396" />
                      <option name="theoryId" value="5859" />
                      <option name="title" value="Variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="398" />
                      <option name="theoryId" value="5865" />
                      <option name="title" value="Integer arithmetic" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="440" />
                      <option name="theoryId" value="6224" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="397" />
                      <option name="theoryId" value="5885" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="400" />
                      <option name="theoryId" value="5891" />
                      <option name="title" value="Invoking a function" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="404" />
                      <option name="theoryId" value="5913" />
                      <option name="title" value="Taking input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="399" />
                      <option name="theoryId" value="5872" />
                      <option name="title" value="Program with numbers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="501" />
                      <option name="theoryId" value="6842" />
                      <option name="title" value="Basic string methods" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="415" />
                      <option name="theoryId" value="6025" />
                      <option name="title" value="Boolean logic" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="722" />
                      <option name="theoryId" value="8828" />
                      <option name="title" value="Membership testing" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="405" />
                      <option name="theoryId" value="5920" />
                      <option name="title" value="Comparisons" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="406" />
                      <option name="theoryId" value="5953" />
                      <option name="title" value="If statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="407" />
                      <option name="theoryId" value="5932" />
                      <option name="title" value="Else statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="408" />
                      <option name="theoryId" value="5926" />
                      <option name="title" value="Elif statement" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="401" />
                      <option name="theoryId" value="5900" />
                      <option name="title" value="Declaring a function" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="455" />
                      <option name="theoryId" value="6322" />
                      <option name="title" value="Scopes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="438" />
                      <option name="theoryId" value="6193" />
                      <option name="title" value="PyCharm basics" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="395" />
                      <option name="theoryId" value="5979" />
                      <option name="title" value="List" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="409" />
                      <option name="theoryId" value="5940" />
                      <option name="title" value="While loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="429" />
                      <option name="theoryId" value="6065" />
                      <option name="title" value="For loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="453" />
                      <option name="theoryId" value="6302" />
                      <option name="title" value="Loop control statements" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="393" />
                      <option name="theoryId" value="5814" />
                      <option name="title" value="Quotes and multi-line strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="417" />
                      <option name="theoryId" value="6037" />
                      <option name="title" value="String formatting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="488" />
                      <option name="theoryId" value="6661" />
                      <option name="title" value="Class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="489" />
                      <option name="theoryId" value="6669" />
                      <option name="title" value="Class instances" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="490" />
                      <option name="theoryId" value="6677" />
                      <option name="title" value="Class vs instance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="508" />
                      <option name="theoryId" value="6931" />
                      <option name="title" value="Methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="511" />
                      <option name="theoryId" value="6981" />
                      <option name="title" value="Methods and attributes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="530" />
                      <option name="theoryId" value="7139" />
                      <option name="title" value="Magic methods" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="What can be better than a cup of coffee during a break? A coffee that you don’t have to make yourself. It’s enough to press a couple of buttons on the machine and you get a cup of energy; but first, we should teach the machine how to do it. In this project, you will work on programming a coffee machine simulator. The machine works with typical products: coffee, milk, sugar, and plastic cups; if it runs out of something, it shows a notification. You can get three types of coffee: espresso, cappuccino, and latte. Since nothing’s for free, it also collects the money." />
              <option name="id" value="68" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/219111/additional_files.json" />
              <option name="language" value="python" />
              <option name="templateBased" value="false" />
              <option name="title" value="Coffee Machine" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="5" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Coffee Machine" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" value="stage1" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's start with a program that makes you a coffee – virtual coffee, of course. In this project, you will implement functionality that simulates a real coffee machine. It can run out of ingredients, such as milk or coffee beans, it can offer you various types of coffee, and, finally, it will take money for the prepared drink.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objective&lt;/h2&gt;&#10;&#10;&lt;p&gt;The first version of the program just makes you a coffee. It should print to the standard output what it is doing as it makes the drink.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Take a look at the sample output below and print all the following lines.&lt;/p&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Starting to make a coffee&#10;Grinding coffee beans&#10;Boiling water&#10;Mixing boiled water with crushed coffee beans&#10;Pouring coffee into the cup&#10;Pouring some milk into the cup&#10;Coffee is ready!&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/366/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5790" />
                      <option name="index" value="1" />
                      <option name="name" value="Hello, coffee!" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;OUTPUT = &quot;&quot;&quot;&#10;Starting to make a coffee&#10;Grinding coffee beans&#10;Boiling water&#10;Mixing boiled water with crushed coffee beans&#10;Pouring coffee into the cup&#10;Pouring some milk into the cup&#10;Coffee is ready!&#10;&quot;&quot;&quot;&#10;&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik([('', OUTPUT)])&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;        return CheckResult(&#10;            reply.strip() == clue.strip(),&#10;            'You should make coffee exactly like in the example')&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage2" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Now let's consider a case when you need a lot of coffee. Maybe you're hosting a party with a lot of guests! In these circumstances, it's better to make preparations in advance.&lt;/p&gt;&#10;&#10;&lt;p&gt;So, we will ask a user to enter the desired amount of coffee, in cups. Given this, you can adjust the program by calculating how much water, coffee beans, and milk are necessary to make the specified amount of coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;Of course, all this coffee is not needed &lt;em&gt;right&lt;/em&gt; now, so at this stage, the coffee machine doesn't actually make any coffee yet.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's break the task into several steps:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;First, read the numbers of coffee drinks from the input.&lt;/li&gt;&#10;&#9;&lt;li&gt;Figure out how much of each ingredient the machine will need. Note that one cup of coffee made on this coffee machine contains &lt;em&gt;200 ml&lt;/em&gt; of water, &lt;em&gt;50 ml&lt;/em&gt; of milk, and &lt;em&gt;15 g&lt;/em&gt; of coffee beans.&lt;/li&gt;&#10;&#9;&lt;li&gt;Output the required ingredient amounts back to the user.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;The greater-than symbol followed by space (&lt;code class=&quot;java&quot;&gt;&amp;gt; &lt;/code&gt;) represents the user input. Notice that it's not the part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;em&gt;a dialogue with a user might look like this&lt;/em&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many cups of coffee you will need:&#10;&amp;gt; 25&#10;For 25 cups of coffee you will need:&#10;5000 ml of water&#10;1250 ml of milk&#10;375 g of coffee beans&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;em&gt;here is another dialogue&lt;/em&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many cups of coffee you will need:&#10;&amp;gt; 125&#10;For 125 cups of coffee you will need:&#10;25000 ml of water&#10;6250 ml of milk&#10;1875 g of coffee beans&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/367/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5791" />
                      <option name="index" value="2" />
                      <option name="name" value="Machines have needs" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik(&#10;            [&#10;                ('25', '25'),&#10;                ('125', '125'),&#10;                ('1', '1'),&#10;                ('123', '123')&#10;            ]&#10;        )&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;&#10;        lines = reply.splitlines()&#10;&#10;        if len(lines) &lt; 3:&#10;            return CheckResult.wrong(&#10;                'Output contains less than 3 lines, '&#10;                'but should output at least 3 lines')&#10;&#10;        last_3_lines = reply.splitlines()[-3:]&#10;        cups = int(clue)&#10;        water = milk = beans = False&#10;        for line in last_3_lines:&#10;            line = line.lower()&#10;            if 'milk' in line:&#10;                milk = str(cups * 50) in line&#10;&#10;                if not milk:&#10;                    return CheckResult.wrong(&#10;                        f&quot;For the input {clue} your program output:\n\&quot;&quot; +&#10;                        f&quot;{line}\&quot;\nbut the amount of milk should be {cups * 50}&quot;&#10;                    )&#10;&#10;            elif 'water' in line:&#10;                water = str(cups * 200) in line&#10;&#10;                if not water:&#10;                    return CheckResult.wrong(&#10;                        f&quot;For the input {clue} your program output:\n&quot; +&#10;                        f&quot;{line}\nbut the amount of water should be {cups * 200}&quot;&#10;                    )&#10;&#10;            elif 'beans' in line:&#10;                beans = str(cups * 15) in line&#10;&#10;                if not beans:&#10;                    return CheckResult.wrong(&#10;                        f&quot;For the input {clue} your program output:\n&quot; +&#10;                        f&quot;{line}\nbut the amount of beans should be {cups * 15}&quot;&#10;                    )&#10;&#10;            else:&#10;                return CheckResult.wrong(&#10;                    &quot;One of the last 3 lines &quot; +&#10;                    &quot;doesn't contain \&quot;milk\&quot;, \&quot;water\&quot; or \&quot;beans\&quot;&quot;&#10;                )&#10;&#10;        if not water:&#10;            return CheckResult.wrong(&quot;There is no line with amount of water&quot;)&#10;&#10;        if not milk:&#10;            return CheckResult.wrong(&quot;There is no line with amount of milk&quot;)&#10;&#10;        if not beans:&#10;            return CheckResult.wrong(&quot;There is no line with amount of coffee beans&quot;)&#10;&#10;        return CheckResult.correct()&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here&#10;print('''Starting to make a coffee&#10;Grinding coffee beans&#10;Boiling water&#10;Mixing boiled water with crushed coffee beans&#10;Pouring coffee into the cup&#10;Pouring some milk into the cup&#10;Coffee is ready!''')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage3" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;A real coffee machine doesn't have an infinite supply of water, milk, or coffee beans. And if you input a really big number, it's almost certain that a real coffee machine wouldn't have the supplies needed to make all that coffee for you.&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage, you need to improve the previous program. Now you will check amounts of water, milk, and coffee beans available in your coffee machine at the moment.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Write a program that does the following:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;It requests the amounts of water, milk, and coffee beans available at the moment, and then asks for the number of cups a user needs.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the coffee machine has enough supplies to make the specified amount of coffee, the program should print &lt;code class=&quot;java&quot;&gt;&quot;Yes, I can make that amount of coffee&quot;&lt;/code&gt;.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the coffee machine can make more than that, the program should output &lt;code class=&quot;java&quot;&gt;&quot;Yes, I can make that amount of coffee (and even N more than that)&quot;&lt;/code&gt;, where &lt;em&gt;N&lt;/em&gt; is the number of additional cups of coffee that the coffee machine can make.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the amount of given resources is not enough to make the specified amount of coffee, the program should output &lt;code class=&quot;java&quot;&gt;&quot;No, I can make only N cups of coffee&quot;&lt;/code&gt;.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;Like in the previous stage, the coffee machine needs &lt;em&gt;200 ml&lt;/em&gt; of water, &lt;em&gt;50 ml&lt;/em&gt; of milk, and &lt;em&gt;15 g&lt;/em&gt; of coffee beans to make one cup of coffee.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;The greater-than symbol followed by space (&lt;code class=&quot;java&quot;&gt;&amp;gt; &lt;/code&gt;) represents the user input. Notice that it's not the part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 300&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 65&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 100&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 1&#10;Yes, I can make that amount of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 500&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 250&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 200&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 10&#10;No, I can make only 2 cups of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 1550&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 299&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 300&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 3&#10;Yes, I can make that amount of coffee (and even 2 more than that)&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 0&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 0&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 0&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 1&#10;No, I can make only 0 cups of coffee&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 0&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 0&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 0&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 0&#10;Yes, I can make that amount of coffee &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 6:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write how many ml of water the coffee machine has:&#10;&amp;gt; 200&#10;Write how many ml of milk the coffee machine has:&#10;&amp;gt; 50&#10;Write how many grams of coffee beans the coffee machine has:&#10;&amp;gt; 15&#10;Write how many cups of coffee you will need:&#10;&amp;gt; 0&#10;Yes, I can make that amount of coffee (and even 1 more than that)&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/368/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5792" />
                      <option name="index" value="3" />
                      <option name="name" value="Enough coffee for everyone" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik(&#10;            [&#10;                ('300\n65\n111\n1\n', (True, 0, True)),&#10;                ('600\n153\n100\n1', (True, 2, True)),&#10;                ('1400\n150\n100\n1', (True, 2, True)),&#10;                ('1400\n1500\n45\n1', (True, 2, True)),&#10;                ('599\n250\n200\n10', (False, 2, True)),&#10;                ('34564\n43423\n23234\n1', (True, 171, True)),&#10;                ('345640\n434230\n23234\n1', (True, 1547, True)),&#10;                ('345640\n43423\n23234\n19246', (False, 868, True)),&#10;&#10;                ('399\n112\n111\n1', (True, 0, False)),&#10;                ('2400\n249\n100\n1', (True, 3, False)),&#10;                ('1400\n1500\n44\n1', (True, 1, False)),&#10;                ('500\n250\n200\n10', (False, 2, False)),&#10;                ('600\n250\n200\n10', (False, 3, False)),&#10;                ('345640\n43423\n23234\n1', (True, 867, False)),&#10;                ('345640\n434230\n23234\n19246', (False, 1548, False)),&#10;                ('34564\n43423\n23234\n19246', (False, 172, False)),&#10;            ]&#10;        )&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;        user_output = reply.split(':')[-1].strip()&#10;        lowered_output = user_output.lower()&#10;        ans, amount, show_tests = clue&#10;        if ans and 'yes' in lowered_output:&#10;            if amount &gt; 0:&#10;                is_correct = f'{amount}' in lowered_output&#10;                if is_correct:&#10;                    if f'{amount}.' in lowered_output:&#10;                        return CheckResult.wrong(&#10;                            &quot;There is a dot after an amount of cups. &quot;&#10;                            &quot;There should be no dot.\n&quot;&#10;                            &quot;Your output:\n&quot; +&#10;                            user_output&#10;                        )&#10;                    return CheckResult.correct()&#10;&#10;                else:&#10;                    right_output = (&#10;                        &quot;Yes, I can make that amount of coffee&quot; +&#10;                        f&quot; (and even {amount} more than that)&quot;&#10;                    )&#10;&#10;                    if show_tests:&#10;                        return CheckResult.wrong(&#10;                            &quot;Your output:\n&quot; +&#10;                            user_output +&#10;                            &quot;\nRight output:\n&quot; +&#10;                            right_output&#10;                        )&#10;&#10;                    else:&#10;                        return CheckResult.wrong('')&#10;&#10;            return CheckResult.correct()&#10;        else:&#10;            cond1 = 'no' in lowered_output&#10;            cond2 = str(amount) in lowered_output&#10;&#10;            if cond1 and cond2:&#10;                if f'{amount}.' in lowered_output:&#10;                    return CheckResult.wrong(&#10;                        &quot;There is a dot after an amount of cups. &quot;&#10;                        &quot;There should be no dot.\n&quot;&#10;                        &quot;Your output:\n&quot; +&#10;                        user_output&#10;                    )&#10;                return CheckResult.correct()&#10;&#10;            else:&#10;                right_output = (&#10;                    &quot;No, I can make only &quot; +&#10;                    f&quot;{amount} cup(s) of coffee&quot;&#10;                )&#10;&#10;                if show_tests:&#10;                    return CheckResult.wrong(&#10;                        &quot;Your output:\n&quot; +&#10;                        user_output +&#10;                        &quot;\nRight output:\n&quot; +&#10;                        right_output&#10;                    )&#10;                else:&#10;                    return CheckResult.wrong('')&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here&#10;coffee_cups = int(input('Write how many cups of coffee you will need: '))&#10;print('For ', coffee_cups, ' cups of coffee you will need:')&#10;print(200 * coffee_cups, ' ml of water')&#10;print(50 * coffee_cups, ' ml of milk')&#10;print(15 * coffee_cups, ' g of coffee beans')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage4" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's simulate an actual coffee machine! What do we need for that? This coffee machine will have a limited supply of water, milk, coffee beans, and disposable cups. Also, it will calculate how much money it gets for selling coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;There are several options for the coffee machine we want you to implement: first, it should sell coffee. It can make different types of coffee: espresso, latte, and cappuccino. Of course, each variety requires a different amount of supplies, however, in any case, you will need only one disposable cup for a drink. Second, the coffee machine must get replenished by a special worker. Third, another special worker should be able to take out money from the coffee machine.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Write a program that offers to buy one cup of coffee or to fill the supplies or to take its money out. Note that the program is supposed to do one of the mentioned actions at a time. It should also calculate how many ingredients and money have left. Display the number of supplies before and after purchase.&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;First, your program reads one option from the standard input, which can be &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;&quot;fill&quot;&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;&quot;take&quot;&lt;/code&gt;. If a user wants to buy some coffee, the input is &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt;. If a special worker thinks that it is time to fill out all the supplies for the coffee machine, the input line will be &lt;code class=&quot;java&quot;&gt;&quot;fill&quot;&lt;/code&gt;. If another special worker decides that it is time to take out the money from the coffee machine, you'll get the input &lt;code class=&quot;java&quot;&gt;&quot;take&quot;&lt;/code&gt;.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the user writes &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt; then they must choose one of three types of coffee that the coffee machine can make: espresso, latte, or cappuccino.&#10;&#9;&lt;ul&gt;&#10;&#9;&#9;&lt;li&gt;For one espresso, the coffee machine needs &lt;em&gt;250 ml&lt;/em&gt; of water and &lt;em&gt;16 g&lt;/em&gt; of coffee beans. It costs &lt;em&gt;$4&lt;/em&gt;.&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;For a latte, the coffee machine needs &lt;em&gt;350 ml&lt;/em&gt; of water, &lt;em&gt;75 ml&lt;/em&gt; of milk, and &lt;em&gt;20 g&lt;/em&gt; of coffee beans. It costs &lt;em&gt;$7&lt;/em&gt;.&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;And for a cappuccino, the coffee machine needs &lt;em&gt;200 ml&lt;/em&gt; of water, &lt;em&gt;100 ml&lt;/em&gt; of milk, and &lt;em&gt;12 g&lt;/em&gt; of coffee. It costs &lt;em&gt;$6&lt;/em&gt;.&lt;/li&gt;&#10;&#9;&lt;/ul&gt;&#10;&#9;&lt;/li&gt;&#10;&#9;&lt;li&gt;If the user writes &lt;code class=&quot;java&quot;&gt;&quot;fill&quot;&lt;/code&gt;, the program should ask them how much water, milk, coffee beans and how many disposable cups they want to add into the coffee machine.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the user writes &lt;code class=&quot;java&quot;&gt;&quot;take&quot;&lt;/code&gt; the program should give all the money that it earned from selling coffee.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;At the moment, the coffee machine has &lt;em&gt;$550&lt;/em&gt;, &lt;em&gt;1200 ml&lt;/em&gt; of water, &lt;em&gt;540 ml&lt;/em&gt; of milk, &lt;em&gt;120 g&lt;/em&gt; of coffee beans, and &lt;em&gt;9&lt;/em&gt; disposable cups.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;To sum up, your program should print the coffee machine's state, process one query from the user, as well as print the coffee machine's state after that. Try to use functions for implementing every action that the coffee machine can do.&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;An espresso should be as number &lt;em&gt;1&lt;/em&gt; in the list, a latte as number &lt;em&gt;2&lt;/em&gt; and a cappuccino as number &lt;em&gt;3&lt;/em&gt;.&lt;br&gt;&#10;Options are named as &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;&quot;fill&quot;&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;&quot;take&quot;&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;The greater-than symbol followed by space (&lt;code class=&quot;java&quot;&gt;&amp;gt; &lt;/code&gt;) represents the user input. Notice that it's not the part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take):&#10;&amp;gt; buy&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:&#10;&amp;gt; 3&#10;&#10;The coffee machine has:&#10;1000 of water&#10;440 of milk&#10;108 of coffee beans&#10;8 of disposable cups&#10;556 of money&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take):&#10;&amp;gt; fill&#10;Write how many ml of water do you want to add:&#10;&amp;gt; 2000&#10;Write how many ml of milk do you want to add:&#10;&amp;gt; 500&#10;Write how many grams of coffee beans do you want to add:&#10;&amp;gt; 100&#10;Write how many disposable cups of coffee do you want to add:&#10;&amp;gt; 10&#10;&#10;The coffee machine has:&#10;3200 of water&#10;1040 of milk&#10;220 of coffee beans&#10;19 of disposable cups&#10;550 of money&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;550 of money&#10;&#10;Write action (buy, fill, take):&#10;&amp;gt; take&#10;I gave you $550&#10;&#10;The coffee machine has:&#10;1200 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;0 of money&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/369/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5793" />
                      <option name="index" value="4" />
                      <option name="name" value="Action!" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik(&#10;            [&#10;                ('take\n',) * 2,&#10;                ('buy\n1\n',) * 2,&#10;                ('buy\n2\n',) * 2,&#10;                ('buy\n3\n',) * 2,&#10;                ('fill\n2001\n510\n101\n21\n',) * 2,&#10;            ]&#10;        )&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;        if len(reply.splitlines()) &lt;= 1:&#10;            return CheckResult.wrong('Too few output lines')&#10;&#10;        action, *rest = clue.split()&#10;&#10;        milk = []&#10;        water = []&#10;        beans = []&#10;        cups = []&#10;        money = []&#10;&#10;        for line in reply.splitlines():&#10;            if len(line.split()) == 0:&#10;                continue&#10;            first_word = line.split()[0]&#10;            first_word = first_word.replace('$', '')&#10;            if not first_word.isdigit():&#10;                continue&#10;            amount = int(first_word)&#10;            if 'milk' in line:&#10;                milk += amount,&#10;            elif 'water' in line:&#10;                water += amount,&#10;            elif 'beans' in line:&#10;                beans += amount,&#10;            elif 'cups' in line:&#10;                cups += amount,&#10;            elif 'money' in line:&#10;                money += amount,&#10;&#10;        if len(milk) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;milk\&quot;, &quot; +&#10;                f&quot;found: {len(milk)}&quot;&#10;            )&#10;&#10;        if len(water) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;water\&quot;, &quot; +&#10;                f&quot;found: {len(water)}&quot;&#10;            )&#10;&#10;        if len(beans) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;beans\&quot;, &quot; +&#10;                f&quot;found: {len(beans)}&quot;&#10;            )&#10;&#10;        if len(cups) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;cups\&quot;, &quot; +&#10;                f&quot;found: {len(cups)}&quot;&#10;            )&#10;&#10;        if len(money) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;money\&quot;, &quot; +&#10;                f&quot;found: {len(money)}&quot;&#10;            )&#10;&#10;        milk = milk[0], milk[-1]&#10;        water = water[0], water[-1]&#10;        beans = beans[0], beans[-1]&#10;        cups = cups[0], cups[-1]&#10;        money = money[0], money[-1]&#10;&#10;        if water[0] != 1200 or milk[0] != 540 or beans[0] != 120 or cups[0] != 9 or money[0] != 550:&#10;            return CheckResult.wrong(&#10;                &quot;Initial setup is wrong: &quot; +&#10;                &quot;coffee machine should fe filled like &quot; +&#10;                &quot;stated in the description&quot;&#10;            )&#10;&#10;        diff = lambda item: item[1] - item[0]&#10;&#10;        if action == 'take':&#10;            if diff(milk) != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;take\&quot; action milk &quot; +&#10;                    &quot;amount shouldn't be changed&quot;&#10;                )&#10;&#10;            if diff(water) != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;take\&quot; action water &quot; +&#10;                    &quot;amount shouldn't be changed&quot;&#10;                )&#10;&#10;            if diff(beans) != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;take\&quot; action beans &quot; +&#10;                    &quot;amount shouldn't be changed&quot;&#10;                )&#10;&#10;            if diff(cups) != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;take\&quot; action cups &quot; +&#10;                    &quot;amount shouldn't be changed&quot;&#10;                )&#10;&#10;            if money[1] != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;take\&quot; action money &quot; +&#10;                    &quot;amount should be zero&quot;&#10;                )&#10;&#10;            return CheckResult.correct()&#10;&#10;        elif action == 'buy':&#10;            option = rest[0]&#10;            if option == '1':&#10;&#10;                if diff(water) != -250:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the first option &quot; +&#10;                        &quot;water amount should be lowered by 250&quot;&#10;                    )&#10;&#10;                if diff(milk) != 0:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the first option &quot; +&#10;                        &quot;milk amount should not be changed&quot;&#10;                    )&#10;&#10;                if diff(beans) != -16:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the first option &quot; +&#10;                        &quot;beans amount should be lowered by 16&quot;&#10;                    )&#10;&#10;                if diff(cups) != -1:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the first option &quot; +&#10;                        &quot;cups amount should be lowered by 1&quot;&#10;                    )&#10;&#10;                if diff(money) != 4:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the first option &quot; +&#10;                        &quot;money amount should be increased by 4&quot;&#10;                    )&#10;&#10;                return CheckResult.correct()&#10;&#10;            elif option == '2':&#10;&#10;                if diff(water) != -350:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the second option &quot; +&#10;                        &quot;water amount should be lowered by 350&quot;&#10;                    )&#10;&#10;                if diff(milk) != -75:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the second option &quot; +&#10;                        &quot;milk amount should be lowered by 75&quot;&#10;                    )&#10;&#10;                if diff(beans) != -20:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the second option &quot; +&#10;                        &quot;beans amount should be lowered by 20&quot;&#10;                    )&#10;&#10;                if diff(cups) != -1:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the second option &quot; +&#10;                        &quot;cups amount should be lowered by 1&quot;&#10;                    )&#10;&#10;                if diff(money) != 7:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the second option &quot; +&#10;                        &quot;money amount should be increased by 7&quot;&#10;                    )&#10;&#10;                return CheckResult.correct()&#10;&#10;            elif option == '3':&#10;&#10;                if diff(water) != -200:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the third option &quot; +&#10;                        &quot;water amount should be lowered by 200&quot;&#10;                    )&#10;&#10;                if diff(milk) != -100:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the third option &quot; +&#10;                        &quot;milk amount should be lowered by 100&quot;&#10;                    )&#10;&#10;                if diff(beans) != -12:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the third option &quot; +&#10;                        &quot;beans amount should be lowered by 12&quot;&#10;                    )&#10;&#10;                if diff(cups) != -1:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the third option &quot; +&#10;                        &quot;cups amount should be lowered by 1&quot;&#10;                    )&#10;&#10;                if diff(money) != 6:&#10;                    return CheckResult.wrong(&#10;                        &quot;After buying the third option &quot; +&#10;                        &quot;money amount should be increased by 6&quot;&#10;                    )&#10;&#10;                return CheckResult.correct()&#10;&#10;        elif action == 'fill':&#10;            water_, milk_, beans_, cups_ = map(int, rest)&#10;&#10;            if diff(money) != 0:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                    &quot;money amount should not be changed&quot;&#10;                )&#10;&#10;            if diff(water) != water_:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                    f&quot;water amount expected to be increased by {water_}&quot; +&#10;                    f&quot; but was increased by {diff(water)}&quot;&#10;                )&#10;&#10;            if diff(milk) != milk_:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                    f&quot;milk amount expected to be increased by {milk_}&quot; +&#10;                    f&quot; but was increased by {diff(milk)}&quot;&#10;                )&#10;&#10;            if diff(beans) != beans_:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                    f&quot;beans amount expected to be increased by {beans_}&quot; +&#10;                    f&quot; but was increased by {diff(beans)}&quot;&#10;                )&#10;&#10;            if diff(cups) != cups_:&#10;                return CheckResult.wrong(&#10;                    &quot;After \&quot;fill\&quot; action &quot; +&#10;                    f&quot;cups amount expected to be increased by {cups_}&quot; +&#10;                    f&quot; but was increased by {diff(cups)}&quot;&#10;                )&#10;&#10;            return CheckResult.correct()&#10;&#10;        return CheckResult.correct()&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here&#10;water = int(input('Write how many ml of water the coffee machine has:'))&#10;milk = int(input('Write how many ml of milk the coffee machine has:'))&#10;beans = int(input('Write how many grams of coffee beans the coffee machine has:'))&#10;desired_cups = int(input('Write how many cups of coffee you will need:'))&#10;possible_cups = min(water // 200, milk // 50, beans // 15)&#10;if possible_cups &gt; desired_cups:&#10;    print('Yes, I can make that amount of coffee (and even', possible_cups - desired_cups, 'more than that)')&#10;elif possible_cups == desired_cups:&#10;    print('Yes, I can make that amount of coffee')&#10;else:&#10;    print('No, I can make only', possible_cups, 'cups of coffee')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage5" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Just one action is not so interesting, is it? Let's improve the program so it can do multiple actions, one after another. It should repeatedly ask a user what they want to do. If the user types &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;&quot;fill&quot;&lt;/code&gt; or &lt;code class=&quot;java&quot;&gt;&quot;take&quot;&lt;/code&gt;, then the program should do exactly the same thing it did in the previous step. However, if the user wants to switch off the coffee machine, they should type &lt;code class=&quot;java&quot;&gt;&quot;exit&quot;&lt;/code&gt;. The program should terminate on this command. Also, when the user types &lt;code class=&quot;java&quot;&gt;&quot;remaining&quot;&lt;/code&gt;, the program should output all the resources that the coffee machine has.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Write a program that will work endlessly to make coffee for all interested persons until the shutdown signal is given. Introduce two new options: &lt;code class=&quot;java&quot;&gt;&quot;remaining&quot;&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;&quot;exit&quot;&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Do not forget that you can be out of resources for making coffee. If the coffee machine doesn't have enough resources to make coffee, the program should output a message that says it can't make a cup of coffee.&lt;/p&gt;&#10;&#10;&lt;p&gt;And the last improvement to the program at this step — if the user types &lt;code class=&quot;java&quot;&gt;&quot;buy&quot;&lt;/code&gt; to buy a cup of coffee and then changes his mind, they should be able to type &lt;code class=&quot;java&quot;&gt;&quot;back&quot;&lt;/code&gt; to return into the main cycle.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your coffee machine should have the the same initial resources as in the example (&lt;em&gt;400 ml&lt;/em&gt; of water, &lt;em&gt;540 ml&lt;/em&gt; of milk, &lt;em&gt;120 g&lt;/em&gt; of coffee beans, &lt;em&gt;9&lt;/em&gt; disposable cups, &lt;em&gt;$550&lt;/em&gt; in cash.&lt;/p&gt;&#10;&#10;&lt;p&gt;The greater-than symbol followed by space (&lt;code class=&quot;java&quot;&gt;&amp;gt; &lt;/code&gt;) represents the user input. Notice that it's not the part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;400 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;$550 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;50 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;Sorry, not enough water!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; fill&#10;&#10;Write how many ml of water do you want to add:&#10;&amp;gt; 1000&#10;Write how many ml of milk do you want to add:&#10;&amp;gt; 0&#10;Write how many grams of coffee beans do you want to add:&#10;&amp;gt; 0&#10;Write how many disposable cups of coffee do you want to add:&#10;&amp;gt; 0&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;1050 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$564 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; take&#10;&#10;I gave you $564&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;0 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/370/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5794" />
                      <option name="index" value="5" />
                      <option name="name" value="On a coffee loop" />
                      <option name="record" value="5" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;test1_input = '''remaining&#10;buy&#10;2&#10;buy&#10;2&#10;fill&#10;1000&#10;0&#10;0&#10;0&#10;buy&#10;2&#10;take&#10;remaining&#10;exit&#10;'''&#10;&#10;test2_input = '''remaining&#10;fill&#10;3000&#10;3000&#10;3000&#10;3000&#10;remaining&#10;exit&#10;'''&#10;&#10;test3_input = '''remaining&#10;buy&#10;1&#10;remaining&#10;exit&#10;'''&#10;&#10;test4_input = '''remaining&#10;buy&#10;2&#10;remaining&#10;exit&#10;'''&#10;&#10;test5_input = '''remaining&#10;buy&#10;3&#10;remaining&#10;exit&#10;'''&#10;&#10;test6_input = '''remaining&#10;take&#10;remaining&#10;exit&#10;'''&#10;&#10;test7_input = '''remaining&#10;buy&#10;back&#10;remaining&#10;exit&#10;'''&#10;&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik(&#10;            [&#10;                (&#10;                    test1_input,&#10;                    (&#10;                        700 - 400,&#10;                        390 - 540,&#10;                        80 - 120,&#10;                        7 - 9,&#10;                        0 - 550,&#10;                        &quot;This test is exactly like in the example &quot;&#10;                        &quot;- try to run it by yourself&quot;&#10;                    )&#10;                 ),&#10;&#10;                (&#10;                    test2_input,&#10;                    (&#10;                        3000,&#10;                        3000,&#10;                        3000,&#10;                        3000,&#10;                        0,&#10;                        &quot;This test checks \&quot;fill\&quot; action&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test3_input,&#10;                    (&#10;                        -250,&#10;                        0,&#10;                        -16,&#10;                        -1,&#10;                        4,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the first variant of coffee&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test4_input,&#10;                    (&#10;                        -350,&#10;                        -75,&#10;                        -20,&#10;                        -1,&#10;                        7,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the second variant of coffee&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test5_input,&#10;                    (&#10;                        -200,&#10;                        -100,&#10;                        -12,&#10;                        -1,&#10;                        6,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the third variant of coffee&quot;&#10;                    )&#10;                ),&#10;                (&#10;                    test6_input,&#10;                    (&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        -550,&#10;                        &quot;This test checks \&quot;take\&quot; action&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test7_input,&#10;                    (&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        &quot;This test checks \&quot;back\&quot; &quot; +&#10;                        &quot;action right after \&quot;buy\&quot; action&quot;&#10;                    )&#10;                ),&#10;            ]&#10;        )&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;        if len(reply.splitlines()) &lt;= 1:&#10;            return CheckResult.wrong('Too few lines in output')&#10;&#10;        water_, milk_, beans_, cups_, money_, feedback = clue&#10;&#10;        milk = []&#10;        water = []&#10;        beans = []&#10;        cups = []&#10;        money = []&#10;&#10;        for line in reply.splitlines():&#10;            line = line.replace('$', '').strip()&#10;            if len(line.split()) == 0:&#10;                continue&#10;            first_word = line.split()[0]&#10;            if not first_word.isdigit():&#10;                continue&#10;            amount = int(first_word)&#10;            if 'milk' in line:&#10;                milk += amount,&#10;            elif 'water' in line:&#10;                water += amount,&#10;            elif 'beans' in line:&#10;                beans += amount,&#10;            elif 'cups' in line:&#10;                cups += amount,&#10;            elif 'money' in line or 'cash' in line:&#10;                money += amount,&#10;&#10;        if len(milk) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;milk\&quot;, &quot; +&#10;                f&quot;found: {len(milk)}&quot;&#10;            )&#10;&#10;        if len(water) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;water\&quot;, &quot; +&#10;                f&quot;found: {len(water)}&quot;&#10;            )&#10;&#10;        if len(beans) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;beans\&quot;, &quot; +&#10;                f&quot;found: {len(beans)}&quot;&#10;            )&#10;&#10;        if len(cups) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;cups\&quot;, &quot; +&#10;                f&quot;found: {len(cups)}&quot;&#10;            )&#10;&#10;        if len(money) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;money\&quot;, &quot; +&#10;                f&quot;found: {len(money)}&quot;&#10;            )&#10;&#10;        milk = milk[0], milk[-1]&#10;        water = water[0], water[-1]&#10;        beans = beans[0], beans[-1]&#10;        cups = cups[0], cups[-1]&#10;        money = money[0], money[-1]&#10;&#10;        diff = lambda item: item[1] - item[0]&#10;&#10;        is_correct = (&#10;            diff(water) == water_ and&#10;            diff(milk) == milk_ and&#10;            diff(beans) == beans_ and&#10;            diff(cups) == cups_ and&#10;            diff(money) == money_&#10;        )&#10;        return CheckResult(is_correct, feedback)&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here&#10;water = 1200&#10;milk = 540&#10;coffee_beans = 120&#10;disposable_cups = 9&#10;money = 550&#10;&#10;&#10;def current_state():&#10;    print('The coffee machine has:')&#10;    print(water, 'of water')&#10;    print(milk, 'of milk')&#10;    print(coffee_beans, 'of coffee beans')&#10;    print(disposable_cups, 'of disposable cups')&#10;    print(money, 'of money')&#10;    print()&#10;&#10;&#10;def buy():&#10;    global water&#10;    global milk&#10;    global coffee_beans&#10;    global disposable_cups&#10;    global money&#10;    coffee_type = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:')&#10;    if coffee_type == '1':&#10;        water -= 250&#10;        coffee_beans -= 16&#10;        money += 4&#10;    elif coffee_type == '2':&#10;        water -= 350&#10;        milk -= 75&#10;        coffee_beans -= 20&#10;        money += 7&#10;    elif coffee_type == '3':&#10;        water -= 200&#10;        milk -= 100&#10;        coffee_beans -= 12&#10;        money += 6&#10;    disposable_cups -= 1&#10;    current_state()&#10;&#10;&#10;def fill():&#10;    global water&#10;    global milk&#10;    global coffee_beans&#10;    global disposable_cups&#10;    water += int(input('Write how many ml of water do you want to add:'))&#10;    milk += int(input('Write how many ml of milk do you want to add:'))&#10;    coffee_beans += int(input('Write how many grams of coffee beans do you want to add:'))&#10;    disposable_cups += int(input('Write how many disposable cups of coffee do you want to add:'))&#10;    current_state()&#10;&#10;&#10;def take():&#10;    global money&#10;    print('I gave you $', money)&#10;    money = 0&#10;    current_state()&#10;&#10;&#10;current_state()&#10;action = input('Write action (buy, fill, take):')&#10;if action == 'buy':&#10;    buy()&#10;elif action == 'fill':&#10;    fill()&#10;elif action == 'take':&#10;    take()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage6" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's redesign our program and write a class that represents the coffee machine. The class should have a method that takes a string as input. Every time the user inputs a string to the console, the program invokes this method with one argument: the line that user input to the console. This system simulates pretty accurately how real-world electronic devices work. External components (like buttons on the coffee machine or tapping on the screen) generate events that pass into the single interface of the program.&lt;/p&gt;&#10;&#10;&lt;p&gt;The class should not use system input at all; it will only handle the input that comes to it via this method and its string argument.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first problem that comes to mind: how to write that method in a way that it represents all that coffee machine can do? If the user inputs a single number, how can the method determine what that number is: a variant of coffee chosen by the user or the number of the disposable cups that a special worker added into the coffee machine?&lt;/p&gt;&#10;&#10;&lt;p&gt;The right solution to this problem is to store the current state of the machine. The coffee machine has several states it can be in. For example, the state could be &quot;choosing an action&quot; or &quot;choosing a type of coffee&quot;. Every time the user inputs something and a program passes that line to the method, the program determines how to interpret this line using the information about the current state. After processing this line, the state of the coffee machine can be changed or can stay the same.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objective&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your final task is to refactor the program. Make it so that you can communicate with the coffee machine through a single method. Good luck!&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your coffee machine should have the the same initial resources as in the example (&lt;em&gt;400 ml&lt;/em&gt; of water, &lt;em&gt;540 ml&lt;/em&gt; of milk, &lt;em&gt;120 g&lt;/em&gt; of coffee beans, &lt;em&gt;9&lt;/em&gt; disposable cups, &lt;em&gt;$550&lt;/em&gt; in cash.&lt;br&gt;&#10;The greater-than symbol followed by space (&lt;code class=&quot;java&quot;&gt;&amp;gt; &lt;/code&gt;) represents the user input. Notice that it's not the part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;400 of water&#10;540 of milk&#10;120 of coffee beans&#10;9 of disposable cups&#10;$550 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;50 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;Sorry, not enough water!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; fill&#10;&#10;Write how many ml of water do you want to add:&#10;&amp;gt; 1000&#10;Write how many ml of milk do you want to add:&#10;&amp;gt; 0&#10;Write how many grams of coffee beans do you want to add:&#10;&amp;gt; 0&#10;Write how many disposable cups of coffee do you want to add:&#10;&amp;gt; 0&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;1050 of water&#10;465 of milk&#10;100 of coffee beans&#10;8 of disposable cups&#10;$557 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; buy&#10;&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&amp;gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$564 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; take&#10;&#10;I gave you $564&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; remaining&#10;&#10;The coffee machine has:&#10;700 of water&#10;390 of milk&#10;80 of coffee beans&#10;7 of disposable cups&#10;$0 of money&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/68/stages/371/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5795" />
                      <option name="index" value="6" />
                      <option name="name" value="Brush your code" />
                      <option name="record" value="6" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.stage_test import *&#10;from hstest.test_case import TestCase&#10;&#10;CheckResult.correct = lambda: CheckResult(True, '')&#10;CheckResult.wrong = lambda feedback: CheckResult(False, feedback)&#10;&#10;test1_input = '''remaining&#10;buy&#10;2&#10;buy&#10;2&#10;fill&#10;1000&#10;0&#10;0&#10;0&#10;buy&#10;2&#10;take&#10;remaining&#10;exit&#10;'''&#10;&#10;test2_input = '''remaining&#10;fill&#10;3000&#10;3000&#10;3000&#10;3000&#10;remaining&#10;exit&#10;'''&#10;&#10;test3_input = '''remaining&#10;buy&#10;1&#10;remaining&#10;exit&#10;'''&#10;&#10;test4_input = '''remaining&#10;buy&#10;2&#10;remaining&#10;exit&#10;'''&#10;&#10;test5_input = '''remaining&#10;buy&#10;3&#10;remaining&#10;exit&#10;'''&#10;&#10;test6_input = '''remaining&#10;take&#10;remaining&#10;exit&#10;'''&#10;&#10;test7_input = '''remaining&#10;buy&#10;back&#10;remaining&#10;exit&#10;'''&#10;&#10;&#10;class CoffeeMachineTest(StageTest):&#10;    def generate(self) -&gt; List[TestCase]:&#10;        return TestCase.from_stepik(&#10;            [&#10;                (&#10;                    test1_input,&#10;                    (&#10;                        700 - 400,&#10;                        390 - 540,&#10;                        80 - 120,&#10;                        7 - 9,&#10;                        0 - 550,&#10;                        &quot;This test is exactly like in the example &quot;&#10;                        &quot;- try to run it by yourself&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test2_input,&#10;                    (&#10;                        3000,&#10;                        3000,&#10;                        3000,&#10;                        3000,&#10;                        0,&#10;                        &quot;This test checks \&quot;fill\&quot; action&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test3_input,&#10;                    (&#10;                        -250,&#10;                        0,&#10;                        -16,&#10;                        -1,&#10;                        4,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the first variant of coffee&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test4_input,&#10;                    (&#10;                        -350,&#10;                        -75,&#10;                        -20,&#10;                        -1,&#10;                        7,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the second variant of coffee&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test5_input,&#10;                    (&#10;                        -200,&#10;                        -100,&#10;                        -12,&#10;                        -1,&#10;                        6,&#10;                        &quot;This test checks \&quot;buy\&quot; &quot; +&#10;                        &quot;action with the third variant of coffee&quot;&#10;                    )&#10;                ),&#10;                (&#10;                    test6_input,&#10;                    (&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        -550,&#10;                        &quot;This test checks \&quot;take\&quot; action&quot;&#10;                    )&#10;                ),&#10;&#10;                (&#10;                    test7_input,&#10;                    (&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        0,&#10;                        &quot;This test checks \&quot;back\&quot; &quot; +&#10;                        &quot;action right after \&quot;buy\&quot; action&quot;&#10;                    )&#10;                ),&#10;            ]&#10;        )&#10;&#10;    def check(self, reply: str, clue: Any) -&gt; CheckResult:&#10;        if len(reply.splitlines()) &lt;= 1:&#10;            return CheckResult.wrong('Too few lines in output')&#10;&#10;        water_, milk_, beans_, cups_, money_, feedback = clue&#10;&#10;        milk = []&#10;        water = []&#10;        beans = []&#10;        cups = []&#10;        money = []&#10;&#10;        for line in reply.splitlines():&#10;            line = line.replace('$', '').strip()&#10;            if len(line.split()) == 0:&#10;                continue&#10;            first_word = line.split()[0]&#10;            if not first_word.isdigit():&#10;                continue&#10;            amount = int(first_word)&#10;            if 'milk' in line:&#10;                milk += amount,&#10;            elif 'water' in line:&#10;                water += amount,&#10;            elif 'beans' in line:&#10;                beans += amount,&#10;            elif 'cups' in line:&#10;                cups += amount,&#10;            elif 'money' in line or 'cash' in line:&#10;                money += amount,&#10;&#10;        if len(milk) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;milk\&quot;, &quot; +&#10;                f&quot;found: {len(milk)}&quot;&#10;            )&#10;&#10;        if len(water) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;water\&quot;, &quot; +&#10;                f&quot;found: {len(water)}&quot;&#10;            )&#10;&#10;        if len(beans) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;beans\&quot;, &quot; +&#10;                f&quot;found: {len(beans)}&quot;&#10;            )&#10;&#10;        if len(cups) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;cups\&quot;, &quot; +&#10;                f&quot;found: {len(cups)}&quot;&#10;            )&#10;&#10;        if len(money) != 2:&#10;            return CheckResult.wrong(&#10;                &quot;There should be two lines with \&quot;money\&quot;, &quot; +&#10;                f&quot;found: {len(money)}&quot;&#10;            )&#10;&#10;        milk = milk[0], milk[-1]&#10;        water = water[0], water[-1]&#10;        beans = beans[0], beans[-1]&#10;        cups = cups[0], cups[-1]&#10;        money = money[0], money[-1]&#10;&#10;        diff = lambda item: item[1] - item[0]&#10;&#10;        is_correct = (&#10;            diff(water) == water_ and&#10;            diff(milk) == milk_ and&#10;            diff(beans) == beans_ and&#10;            diff(cups) == cups_ and&#10;            diff(money) == money_&#10;        )&#10;        return CheckResult(is_correct, feedback)&#10;&#10;&#10;if __name__ == '__main__':&#10;    CoffeeMachineTest('machine.coffee_machine').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="machine/coffee_machine.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="machine/coffee_machine.py" />
                                <option name="text" value="# Write your code here&#10;water = 400&#10;milk = 540&#10;coffee_beans = 120&#10;disposable_cups = 9&#10;money = 550&#10;&#10;&#10;def current_state():&#10;    print('The coffee machine has:')&#10;    print(water, 'of water')&#10;    print(milk, 'of milk')&#10;    print(coffee_beans, 'of coffee beans')&#10;    print(disposable_cups, 'of disposable cups')&#10;    print('$' + str(money), 'of money')&#10;    print()&#10;&#10;&#10;def buy():&#10;    global water&#10;    global milk&#10;    global coffee_beans&#10;    global disposable_cups&#10;    global money&#10;    coffee_type = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:')&#10;    if disposable_cups == 0:&#10;        print('Sorry, not enough disposable cups!')&#10;    else:&#10;        if coffee_type == '1':&#10;            if (water - 250) &lt; 0:&#10;                print('Sorry, not enough water!')&#10;            elif (coffee_beans - 16) &lt; 0:&#10;                print('Sorry, not enough coffee beans!')&#10;            else:&#10;                print('I have enough resources, making you a coffee!')&#10;                water -= 250&#10;                coffee_beans -= 16&#10;                money += 4&#10;                disposable_cups -= 1&#10;        elif coffee_type == '2':&#10;            if (water - 350) &lt; 0:&#10;                print('Sorry, not enough water!')&#10;            elif (milk - 75) &lt; 0:&#10;                print('Sorry, not enough milk!')&#10;            elif (coffee_beans - 20) &lt; 0:&#10;                print('Sorry, not enough coffee beans!')&#10;            else:&#10;                print('I have enough resources, making you a coffee!')&#10;                water -= 350&#10;                milk -= 75&#10;                coffee_beans -= 20&#10;                money += 7&#10;                disposable_cups -= 1&#10;        elif coffee_type == '3':&#10;            if (water - 200) &lt; 0:&#10;                print('Sorry, not enough water!')&#10;            elif (milk - 100) &lt; 0:&#10;                print('Sorry, not enough milk!')&#10;            elif (coffee_beans - 12) &lt; 0:&#10;                print('Sorry, not enough coffee beans!')&#10;            else:&#10;                print('I have enough resources, making you a coffee!')&#10;                water -= 200&#10;                milk -= 100&#10;                coffee_beans -= 12&#10;                money += 6&#10;                disposable_cups -= 1&#10;&#10;&#10;def fill():&#10;    global water&#10;    global milk&#10;    global coffee_beans&#10;    global disposable_cups&#10;    water += int(input('Write how many ml of water do you want to add:'))&#10;    milk += int(input('Write how many ml of milk do you want to add:'))&#10;    coffee_beans += int(input('Write how many grams of coffee beans do you want to add:'))&#10;    disposable_cups += int(input('Write how many disposable cups of coffee do you want to add:'))&#10;&#10;&#10;def take():&#10;    global money&#10;    print('I gave you $' + str(money))&#10;    money = 0&#10;&#10;&#10;action = input('Write action (buy, fill, take, remaining, exit):')&#10;while action != 'exit':&#10;    if action == 'buy':&#10;        buy()&#10;    elif action == 'fill':&#10;        fill()&#10;    elif action == 'take':&#10;        take()&#10;    elif action == 'remaining':&#10;        current_state()&#10;    action = input('Write action (buy, fill, take, remaining, exit):')&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Problems" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Lexical reduplication&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8213&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The languages of the world are amazing! Programming languages too, but now we will talk about the human ones. In linguistics, repeating&amp;nbsp;a word or part of it is called &lt;em&gt;reduplication&lt;/em&gt;. This morphological phenomenon is found in different languages. Think for a second, and you will definitely come up with a couple of examples. Just to name a few: &lt;em&gt;knock-knock, so-so, bye-bye&lt;/em&gt;.&lt;/p&gt; &#10;  &lt;p&gt;We have a full reduplication here since the entire word is repeated. That's the mechanism we want you to implement. Print a word exactly 2 times. The spelling rules vary across the globe, so do not separate the halves (that&amp;nbsp;will&amp;nbsp;be easy!).&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-709').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-709&quot; style=&quot;display:none;&quot;&gt;&#10;   The variable &#10;   &lt;code class=&quot;java&quot;&gt;word&lt;/code&gt; stores a string.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;maru&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;marumaru&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;piga&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;pigapiga&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;knock&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;knockknock&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6224&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8213" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8213" />
                      <option name="index" value="1" />
                      <option name="name" value="Lexical reduplication" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;maru&quot;,&quot;marumaru&quot;],[&quot;piga&quot;,&quot;pigapiga&quot;],[&quot;knock&quot;,&quot;knockknock&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="word = input()&#10;&#10;# Change the next line&#10;print(...)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Exactly 100 times&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6716&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Jane&amp;nbsp;knows that variable &lt;em&gt;n&lt;/em&gt; stores some integer number (for example, 12345) and wants to print it exactly 100 times. Help her and&amp;nbsp;write down a single line of code that will print number &lt;em&gt;n&lt;/em&gt; exactly 100 times.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-235').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-235&quot; style=&quot;display:none;&quot;&gt;&#10;   Printing&amp;nbsp;&#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;exactly 100 times is essentially &#10;   &lt;strong&gt;printing the result of&lt;/strong&gt;&amp;nbsp;&#10;   &lt;strong&gt;multiplying n by 100&lt;/strong&gt;!&#10;   &lt;strong&gt;&amp;nbsp;&lt;/strong&gt;But, since &#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;is an integer, the result of &#10;   &lt;em&gt;n * 100&lt;/em&gt;&amp;nbsp;will simply be another integer and not &#10;   &lt;em&gt;n&lt;/em&gt; 100 times. What can we change in an expression &#10;   &lt;em&gt;print(n * 100)&lt;/em&gt;&amp;nbsp;to make it print &#10;   &lt;em&gt;n&lt;/em&gt; 100 times?&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6224&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6716" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6716" />
                      <option name="index" value="2" />
                      <option name="name" value="Exactly 100 times" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="n = 12345&#10;# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Minimal number&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7175&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that takes two integer numbers&amp;nbsp;&lt;strong&gt;&lt;em&gt;x&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;and&amp;nbsp;&lt;strong&gt;&lt;em&gt;y&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;and then prints the&amp;nbsp;minimum of them.&lt;/p&gt; &#10;  &lt;p&gt;Variables&amp;nbsp;&lt;strong&gt;&lt;em&gt;x&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;and&amp;nbsp;&lt;strong&gt;&lt;em&gt;y&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;are already defined for you.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;11&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;935&lt;br&gt;42&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;42&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5891&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7175" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7175" />
                      <option name="index" value="3" />
                      <option name="name" value="Minimal number" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;8\n11&quot;,&quot;8&quot;],[&quot;935\n42&quot;,&quot;42&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="x = int(input())&#10;y = int(input())&#10;# the variables `x` and `y` are defined, so just print the minimum" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Hello, world!&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7173&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The classical introductory exercise, slightly modified. Write a program that takes a string, writes it to the variable&amp;nbsp;&lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt;&amp;nbsp;(this part of code is already written for you) and then prints &quot;Hello, world! Hello, &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt;&quot;.&lt;/p&gt; &#10;  &lt;p&gt;The variable&amp;nbsp;&lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;is already defined.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-351').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-351&quot; style=&quot;display:none;&quot;&gt;&#10;   Invoke the &#10;   &lt;em&gt;print()&lt;/em&gt;&amp;nbsp;function with two arguments – the output string and the&amp;nbsp;&#10;   &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; variable.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;John&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Hello, world! Hello, John&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5891&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7173" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7173" />
                      <option name="index" value="4" />
                      <option name="name" value="Hello, world!" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;John&quot;,&quot;Hello, world! Hello, John&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="name = input()" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;String length&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7174&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that takes a string&amp;nbsp;and prints its length.&lt;/p&gt; &#10;  &lt;p&gt;The variable &lt;code class=&quot;java&quot;&gt;string&lt;/code&gt;&amp;nbsp;is already defined.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;foo&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5891&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7174" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7174" />
                      <option name="index" value="5" />
                      <option name="name" value="String length" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;foo&quot;,&quot;3&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="string = input()" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Longest word&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8437&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Find the longest word in a pair and print its length.&lt;/p&gt; &#10;  &lt;p&gt;The variables &lt;code class=&quot;java&quot;&gt;word1&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;word2&lt;/code&gt; are defined for you.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-200').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-200&quot; style=&quot;display:none;&quot;&gt;&#10;   Make use of &#10;   &lt;code class=&quot;java&quot;&gt;len()&lt;/code&gt; and &#10;   &lt;code class=&quot;java&quot;&gt;max()&lt;/code&gt; functions.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Riddikulus&lt;br&gt;Alohomora&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;10&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;earthquake&lt;br&gt;Supercalifragilisticexpialidocious&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;34&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5891&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8437" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8437" />
                      <option name="index" value="6" />
                      <option name="name" value="Longest word" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Riddikulus\nAlohomora&quot;,&quot;10&quot;],[&quot;earthquake\nSupercalifragilisticexpialidocious&quot;,&quot;34&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="word1 = input()&#10;word2 = input()&#10;&#10;# How many letters does the longest word contain?" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Young and beautiful&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8440&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Find the youngest&amp;nbsp;person among Jack, Alex, Lana and print this person's age.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;23&lt;br&gt;42&lt;br&gt;34&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;23&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5891&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8440" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8440" />
                      <option name="index" value="7" />
                      <option name="name" value="Young and beautiful" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;23\n42\n34&quot;,&quot;23&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="jack_age = int(input())&#10;alex_age = int(input())&#10;lana_age = int(input())" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Poster artist&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6850&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Imagine that you design film posters for a living. Write a program that&amp;nbsp;prints each&amp;nbsp;film&amp;nbsp;title&amp;nbsp;in all caps.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;the lion king&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;THE LION KING&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;MaTRiX&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;MATRIX&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6842&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6850" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6850" />
                      <option name="index" value="8" />
                      <option name="name" value="Poster artist" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;the lion king&quot;,&quot;THE LION KING&quot;],[&quot;MaTRiX&quot;,&quot;MATRIX&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Markdown parsing&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6851&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Markdown syntax is used to format a text. There are several ways to emphasize it&amp;nbsp;using&amp;nbsp;Markdown:&lt;/p&gt; &#10;  &lt;table align=&quot;center&quot; border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; style=&quot;width: 500px;&quot;&gt; &#10;   &lt;thead&gt; &#10;    &lt;tr&gt; &#10;     &lt;th style=&quot;text-align: center;&quot;&gt;Typeface&lt;/th&gt; &#10;     &lt;th style=&quot;text-align: center;&quot;&gt;Example&lt;/th&gt; &#10;    &lt;/tr&gt; &#10;   &lt;/thead&gt; &#10;   &lt;tbody&gt; &#10;    &lt;tr&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;Italic text&lt;/td&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;*italics*, _same italics_&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;Bold text&lt;/td&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;**bold**, __same bold__&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;Strikethrough text&lt;/td&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;~~crossed out~~&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;Code snippet&lt;/td&gt; &#10;     &lt;td style=&quot;text-align: center;&quot;&gt;`code`&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;   &lt;/tbody&gt; &#10;  &lt;/table&gt; &#10;  &lt;p&gt;Read an input and parse the text so that it doesn't include&amp;nbsp;special symbols mentioned in the table &lt;code class=&quot;java&quot;&gt;&quot;*_~`&quot;&lt;/code&gt; at&amp;nbsp;its &lt;strong&gt;beginning &lt;/strong&gt;and its &lt;strong&gt;end&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Do not forget to print the result.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;**Important info**&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Important info&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;~~hidden ~ tilde~~&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;hidden ~ tilde&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6842&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6851" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6851" />
                      <option name="index" value="9" />
                      <option name="name" value="Markdown parsing" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;**Important info**&quot;,&quot;Important info&quot;],[&quot;~~hidden ~ tilde~~&quot;,&quot;hidden ~ tilde&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Preprocessing&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6849&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Preprocess an&amp;nbsp;input text:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;delete punctuation symbols (commas, periods, exclamation and question marks &lt;code class=&quot;java&quot;&gt;,.!?&lt;/code&gt;),&lt;/li&gt; &#10;   &lt;li&gt;convert all symbols to lowercase.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Then print your&amp;nbsp;text.&lt;/p&gt; &#10;  &lt;p&gt;Punctuation marks appear not only at the end of the input string, so you&amp;nbsp;have to figure out how to get rid of all of&amp;nbsp;them.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-360').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-360&quot; style=&quot;display:none;&quot;&gt;&#10;   You can use the following way&amp;nbsp;to remove the punctuation marks: &#10;   &lt;code class=&quot;java&quot;&gt;str.replace(&quot;!&quot;, &quot;&quot;)&lt;/code&gt;. Replacing a symbol with an empty line is the same as removing it.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Nobody expects the Spanish inquisition!&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;nobody expects the spanish inquisition&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6842&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6849" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6849" />
                      <option name="index" value="10" />
                      <option name="name" value="Preprocessing" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Nobody expects the Spanish inquisition!&quot;,&quot;nobody expects the spanish inquisition&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Spellchecker&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6525&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a simple spellchecker that tells you if the word is spelled correctly. Use the dictionary in the code below!&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;A single line with the &quot;word&quot;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;If the word in spelled correctly write &lt;strong&gt;Correct,&amp;nbsp;&lt;/strong&gt;otherwise,&amp;nbsp;&lt;strong&gt;Incorrect.&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aa&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Correct&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5932&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6525" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6525" />
                      <option name="index" value="11" />
                      <option name="name" value="Spellchecker" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;aa&quot;,&quot;Correct&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="dictionary = [&quot;aa&quot;, &quot;abab&quot;, &quot;aac&quot;, &quot;ba&quot;, &quot;bac&quot;, &quot;baba&quot;, &quot;cac&quot;, &quot;caac&quot;]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Minimum and maximum&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7192&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Imagine that your friend asked you to write a program that&amp;nbsp;finds the minimum and the maximum.&lt;/p&gt; &#10;  &lt;p&gt;Write the code that receives two integers as its&amp;nbsp;input, each number goes on a new line. The output should show:&lt;/p&gt; &#10;  &lt;ol&gt; &#10;   &lt;li&gt;The biggest number - in the first line&lt;/li&gt; &#10;   &lt;li&gt;The smallest number - in the second line.&lt;/li&gt; &#10;  &lt;/ol&gt; &#10;  &lt;p&gt;Note that your friend might insert&amp;nbsp;identical numbers! Just output both given numbers in this case.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5932&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7192" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7192" />
                      <option name="index" value="12" />
                      <option name="name" value="Minimum and maximum" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;2\n8&quot;,&quot;8\n2&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Leap Year&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5937&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that checks if a year is leap.&lt;/p&gt; &#10;  &lt;p&gt;A year is considered leap&amp;nbsp;if it is divisible by 4 and NOT divisible by 100, or&amp;nbsp;if it is divisible by 400. So, 2000 is leap and 2100 isn't.&lt;/p&gt; &#10;  &lt;p&gt;The program should work correctly on the numbers&amp;nbsp;1900≤n≤3000.&lt;/p&gt; &#10;  &lt;p&gt;Output either &quot;Leap&quot; or &quot;Ordinary&quot; depending on the input.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2100&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Ordinary&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Leap&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5932&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5937" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5937" />
                      <option name="index" value="13" />
                      <option name="name" value="Leap Year" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;2100&quot;,&quot;Ordinary&quot;],[&quot;2000&quot;,&quot;Leap&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Computer hours&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5930&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that asks a user how long, on average, they spend on a computer per day and:&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;&lt;em&gt;if&lt;/em&gt;&lt;/strong&gt; it is less than 2 hours says &lt;code class=&quot;java&quot;&gt;'That seems reasonable'&lt;/code&gt;&lt;br&gt; &lt;strong&gt;&lt;em&gt;else if&lt;/em&gt;&lt;/strong&gt; it is less than 4 hours per day says &lt;code class=&quot;java&quot;&gt;'Do you have time for anything else?'&lt;/code&gt;&lt;br&gt; &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;the programs says&amp;nbsp;&lt;code class=&quot;java&quot;&gt;'You need to get outside more!'&lt;/code&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;You need to get outside more!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5930" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5930" />
                      <option name="index" value="14" />
                      <option name="name" value="Computer hours" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;6&quot;,&quot;You need to get outside more!&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# Make sure your output matches the assignment *exactly*" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Healthy sleep&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6811&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Ann watched a TV program about health and learned that it is recommended to sleep at least &lt;span class=&quot;math-tex&quot;&gt;\(A\)&lt;/span&gt; hours per day.&amp;nbsp;Oversleeping is also&amp;nbsp;unhealthy and you should not sleep more than&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(B\)&lt;/span&gt; hours. Now, Ann sleeps &lt;span class=&quot;math-tex&quot;&gt;\(H\)&lt;/span&gt;&amp;nbsp;hours per day.&lt;/p&gt; &#10;  &lt;p&gt;Check if Ann's sleep schedule complies with the requirements of that TV program.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The input&amp;nbsp;comprises&amp;nbsp;three strings with variables in the following order: &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\( H \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; is always less than or equal to &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;If Ann sleeps less than &lt;span class=&quot;math-tex&quot;&gt;\(A\)&lt;/span&gt;&amp;nbsp;hours, output &lt;code class=&quot;java&quot;&gt;&quot;Deficiency&quot;&lt;/code&gt;, if she sleeps more than &lt;span class=&quot;math-tex&quot;&gt;\(B\)&lt;/span&gt;&amp;nbsp;hours, output &lt;code class=&quot;java&quot;&gt;&quot;Excess&quot;&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;If&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(H\)&lt;/span&gt;&amp;nbsp;lies between&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(A\)&lt;/span&gt; and&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(B\)&lt;/span&gt;, print &lt;code class=&quot;java&quot;&gt;&quot;Normal&quot;&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-1192').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-1192&quot; style=&quot;display:none;&quot;&gt;&#10;   Check the case: outputs like &#10;   &lt;code class=&quot;java&quot;&gt;&quot;excess&quot;&lt;/code&gt;, &#10;   &lt;code class=&quot;java&quot;&gt;&quot;EXCESS&quot;&lt;/code&gt;, &#10;   &lt;code class=&quot;java&quot;&gt;&quot;ExCeSs&quot;&lt;/code&gt; and others will not pass the tests.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;10&lt;br&gt;8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Normal&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;9&lt;br&gt;10&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Excess&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;9&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Deficiency&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6811" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6811" />
                      <option name="index" value="15" />
                      <option name="name" value="Healthy sleep" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;6\n10\n8&quot;,&quot;Normal&quot;],[&quot;7\n9\n10&quot;,&quot;Excess&quot;],[&quot;7\n9\n2&quot;,&quot;Deficiency&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Calculator&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5938&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Let's write a simple calculator!&lt;/p&gt; &#10;  &lt;p&gt;It will read 3 lines:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;the first number&lt;/li&gt; &#10;   &lt;li&gt;the second number&lt;/li&gt; &#10;   &lt;li&gt;the arithmetic operation.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Numbers are &lt;strong&gt;floats&lt;/strong&gt;!&lt;/p&gt; &#10;  &lt;p&gt;The output is the result of the following: &lt;code class=&quot;java&quot;&gt;first_number operation second_number&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Operations are: &lt;samp&gt;+&lt;/samp&gt;, &lt;samp&gt;-&lt;/samp&gt;, &lt;samp&gt;/&lt;/samp&gt;, &lt;samp&gt;*&lt;/samp&gt;, &lt;samp&gt;mod&lt;/samp&gt;, &lt;samp&gt;pow&lt;/samp&gt;, &lt;samp&gt;div.&lt;/samp&gt;&lt;br&gt; &lt;samp&gt;mod&lt;/samp&gt; — modulo operation, i.e. the remainder of the division &lt;code class=&quot;java&quot;&gt;first_numer % second_number&lt;/code&gt;,&lt;br&gt; &lt;samp&gt;pow&lt;/samp&gt; — exponentiation, the first number will be the base&amp;nbsp;and the second — the power: &lt;code class=&quot;java&quot;&gt;first_number ** second_number&lt;/code&gt;,&lt;br&gt; &lt;samp&gt;div&lt;/samp&gt; — integer division&amp;nbsp;&lt;code class=&quot;java&quot;&gt;first_number //&amp;nbsp;second_number&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Note that if the second number is &lt;strong&gt;0&lt;/strong&gt; and you want to perform any of the operations &lt;code class=&quot;java&quot;&gt;/&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;mod&lt;/code&gt;, or &lt;code class=&quot;java&quot;&gt;div&lt;/code&gt;, the calculator should say &lt;code class=&quot;java&quot;&gt;&quot;Division by 0!&quot;&lt;/code&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5.0&lt;br&gt;0.0&lt;br&gt;mod&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Division by 0!&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-12.0&lt;br&gt;-8.0&lt;br&gt;*&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;96.0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5.0&lt;br&gt;10.0&lt;br&gt;/&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5938" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5938" />
                      <option name="index" value="16" />
                      <option name="name" value="Calculator" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;5.0\n0.0\nmod&quot;,&quot;Division by 0!&quot;],[&quot;-12.0\n-8.0\n*&quot;,&quot;96.0&quot;],[&quot;5.0\n10.0\n/&quot;,&quot;0.5&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Particles&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6521&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The world of elementary particles is rather complex. There are many different classes and they can interact in a rather interesting way.&lt;/p&gt; &#10;  &lt;p&gt;Two important characteristics of the elementary particles are the spin and the electric charge. Here are some of the elementary particles:&lt;/p&gt; &#10;  &lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; style=&quot;width: 500px;&quot;&gt; &#10;   &lt;tbody&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;&lt;strong&gt;Particle&lt;/strong&gt;&lt;/td&gt; &#10;     &lt;td&gt;&lt;strong&gt;Class&lt;/strong&gt;&lt;/td&gt; &#10;     &lt;td&gt;&lt;strong&gt;Spin&lt;/strong&gt;&lt;/td&gt; &#10;     &lt;td&gt;&lt;strong&gt;Electric charge&lt;/strong&gt;&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Strange&lt;/td&gt; &#10;     &lt;td&gt;Quark&lt;/td&gt; &#10;     &lt;td&gt;1/2&lt;/td&gt; &#10;     &lt;td&gt;-1/3&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Charm&lt;/td&gt; &#10;     &lt;td&gt;Quark&lt;/td&gt; &#10;     &lt;td&gt;1/2&lt;/td&gt; &#10;     &lt;td&gt;2/3&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Electron&lt;/td&gt; &#10;     &lt;td&gt;Lepton&lt;/td&gt; &#10;     &lt;td&gt;1/2&lt;/td&gt; &#10;     &lt;td&gt;-1&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Muon&lt;/td&gt; &#10;     &lt;td&gt;Lepton&lt;/td&gt; &#10;     &lt;td&gt;1/2&lt;/td&gt; &#10;     &lt;td&gt;0&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Photon&lt;/td&gt; &#10;     &lt;td&gt;Boson&lt;/td&gt; &#10;     &lt;td&gt;1&lt;/td&gt; &#10;     &lt;td&gt;0&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;    &lt;tr&gt; &#10;     &lt;td&gt;Higgs boson&lt;/td&gt; &#10;     &lt;td&gt;Boson&lt;/td&gt; &#10;     &lt;td&gt;0&lt;/td&gt; &#10;     &lt;td&gt;0&lt;/td&gt; &#10;    &lt;/tr&gt; &#10;   &lt;/tbody&gt; &#10;  &lt;/table&gt; &#10;  &lt;p&gt;Write a program that returns the particle and its class based on&amp;nbsp;its spin and electric charge.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Two lines: first the spin of the particle, then its charge. You do&amp;nbsp;&lt;em&gt;NOT&lt;/em&gt; have to convert these values to floats.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The particle and its class separated by a space.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-1440').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-1440&quot; style=&quot;display:none;&quot;&gt;&#10;   Recall logical operators! They can be used to combine conditions in your &#10;   &lt;code class=&quot;java&quot;&gt;elif&lt;/code&gt; statements.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1/2&lt;br&gt;-1/3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Strange Quark&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6521" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6521" />
                      <option name="index" value="17" />
                      <option name="name" value="Particles" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;1/2\n-1/3&quot;,&quot;Strange Quark&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Grade&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6524&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There is a number of grades you can get in a test: A, B, C, D, F. The percentages are the following:&lt;/p&gt; &#10;  &lt;p&gt;&lt;samp&gt;A: 90-100%&lt;/samp&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;samp&gt;B: 80-90%&lt;/samp&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;samp&gt;C: 70-80%&lt;/samp&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;samp&gt;D: 60-70%&lt;/samp&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;samp&gt;F: &amp;lt;60%&lt;/samp&gt;&lt;/p&gt; &#10;  &lt;p&gt;Determine the grade that a student will get based on the student's score and the maximum score.&lt;/p&gt; &#10;  &lt;p&gt;Note that the upper limit is not included in the range, except for the A grade. For example, a student with 60% will get D, with 70% or 79.9%&amp;nbsp;— C, but the top score 100% is just A.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Two lines: the first with a student's score and the second with the maximum.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The grade of the student.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;75&lt;br&gt;100&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;C&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;100&lt;br&gt;200&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;F&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6524" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6524" />
                      <option name="index" value="18" />
                      <option name="name" value="Grade" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;75\n100&quot;,&quot;C&quot;],[&quot;100\n200&quot;,&quot;F&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="What day is it?" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;What day is it?&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6526&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Today the whole world uses the Coordinated Universal Time (UTC) to distinguish between the time zones. The UTC is considered to be the 0, and the rest of the time zones are expressed using positive or negative offsets from the UTC. For instance, London is in the zone UTC+00:00 (or GMT) and Moscow is in the zone UTC+3:00.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;There are 14 positive offsets (from UTC+1:00 to UTC+14:00) and 12 negative offsets (from UTC-12:00 to UTC-1:00). This also means that at a particular hour, three calendar days are observed on the planet.&lt;/p&gt; &#10;  &lt;p&gt;Imagine, it is 10:30 on a Tuesday in London (UTC). What day of the week is it in a specific timezone?&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The value of offset with the sign (e.g. +3 or -9).&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The day of the week in that timezone.&amp;nbsp;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Tuesday&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-11&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Monday&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6526" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6526" />
                      <option name="index" value="19" />
                      <option name="name" value="What day is it" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;0&quot;,&quot;Tuesday&quot;],[&quot;-11&quot;,&quot;Monday&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Index of synthesis&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6533&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;One way to classify the languages of the world is by looking at their morphological systems. One classification is based on the&amp;nbsp;&lt;strong&gt;index of synthesis&amp;nbsp;&lt;/strong&gt;that reflects an average number of morphemes in a word. The values vary between 1 and 4 and there are 3 types of languages according to that system. Here are they:&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Type — Index&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Analytic&amp;nbsp;— less than 2&lt;/p&gt; &#10;  &lt;p&gt;Synthetic — from 2 to 3 (inclusively)&lt;/p&gt; &#10;  &lt;p&gt;Polysynthetic — more than 3&lt;/p&gt; &#10;  &lt;p&gt;Write a program that given the index of synthesis determines the type of the language.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The value of the index of synthesis.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The type of language.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2.35&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Synthetic&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1.68&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Analytic&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6533" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6533" />
                      <option name="index" value="20" />
                      <option name="name" value="Index of synthesis" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;2.35&quot;,&quot;Synthetic&quot;],[&quot;1.68&quot;,&quot;Analytic&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The farm&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6534&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In a farming game, you can buy certain animals for a specific price. As a player,&amp;nbsp;you want to buy the most useful (i.e. the most expensive) animal. Here are the animals and their prices:&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Item: Price&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Chicken: 23&lt;/p&gt; &#10;  &lt;p&gt;Goat: 678&lt;/p&gt; &#10;  &lt;p&gt;Pig: 1296&lt;/p&gt; &#10;  &lt;p&gt;Cow: 3848&lt;/p&gt; &#10;  &lt;p&gt;Sheep: 6769&lt;/p&gt; &#10;  &lt;p&gt;Write a program that determines what is the most expensive animal that the user can buy with their money and how many of them they can buy.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The money that the user has.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;How many animals the user can afford, for example, &lt;strong&gt;20 chickens&lt;/strong&gt; or &lt;strong&gt;4 cows&lt;/strong&gt;. If the user cannot afford any animal, write&amp;nbsp;&lt;strong&gt;None.&amp;nbsp;&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;   Pay attention to the number of nouns. Also, keep in mind that the word &#10;   &lt;samp&gt;&quot;sheep&quot;&lt;/samp&gt; has the irregular plural form &#10;   &lt;samp&gt;&quot;sheep&quot;&lt;/samp&gt;.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;25&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 chicken&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;None&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;668&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;29 chickens&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6534" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6534" />
                      <option name="index" value="21" />
                      <option name="name" value="The farm" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;25&quot;,&quot;1 chicken&quot;],[&quot;8&quot;,&quot;None&quot;],[&quot;668&quot;,&quot;29 chickens&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The army of units&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6555&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In a computer game, each gamer has an army of units.&lt;/p&gt; &#10;  &lt;p&gt;Write a program that will classify the army of your enemies corresponding to the following rules:&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Units: &amp;nbsp;Category&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;less than 1: no army&lt;/p&gt; &#10;  &lt;p&gt;from 1 to 9: few&lt;/p&gt; &#10;  &lt;p&gt;from 10 to 49: pack&lt;/p&gt; &#10;  &lt;p&gt;from 50 to 499: horde&lt;/p&gt; &#10;  &lt;p&gt;from 500 to 999: swarm&lt;/p&gt; &#10;  &lt;p&gt;1000 and more: legion&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;The program should read the number of units and output the corresponding category.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;18&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;pack&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;few&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6555" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6555" />
                      <option name="index" value="22" />
                      <option name="name" value="The army of units" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;18&quot;,&quot;pack&quot;],[&quot;5&quot;,&quot;few&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Positive, Negative or Zero&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6812&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads an integer number and prints:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;&quot;negative&quot; if the number is less than 0;&lt;/li&gt;&#10;   &lt;li&gt;&quot;positive&quot; if the number is greater than 0;&lt;/li&gt;&#10;   &lt;li&gt;&quot;zero&quot; if the number equals 0.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;Do not output double quotes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-5&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;negative&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6812" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6812" />
                      <option name="index" value="23" />
                      <option name="name" value="Positive, Negative or Zero" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;-5\n&quot;,&quot;negative\n&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Menu&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7998&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Let's say you were asked to create a program for a restaurant: a visitor enters what kind of food they would like to order and gets back the restaurant's offer.&lt;/p&gt; &#10;  &lt;p&gt;The restaurant has just opened so its menu contains only a few options:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;pizza: Margarita, Four Seasons, Neapoletana, Vegetarian, Spicy&lt;/li&gt; &#10;   &lt;li&gt;salad: Caesar salad, Green salad, Tuna salad, Fruit salad&lt;/li&gt; &#10;   &lt;li&gt;soup: Chicken soup, Ramen, Tomato soup, Mushroom cream soup&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;If the visitors asks for something that is not in the menu, the program should write &quot;Sorry, we don't have it in the menu&quot;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code class=&quot;java&quot;&gt;&quot;pizza&quot;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Output:&lt;/strong&gt; &lt;code class=&quot;java&quot;&gt;&quot;Margarita, Four Seasons, Neapoletana, Vegetarian, Spicy&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code class=&quot;java&quot;&gt;&quot;burger&quot;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Output:&lt;/strong&gt; &lt;code class=&quot;java&quot;&gt;&quot;Sorry, we don't have it in the menu&quot;&lt;/code&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;pizza&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Margarita, Four Seasons, Neapoletana, Vegetarian, Spicy&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7998" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7998" />
                      <option name="index" value="24" />
                      <option name="name" value="Menu" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;pizza\n&quot;,&quot;Margarita, Four Seasons, Neapoletana, Vegetarian, Spicy\n&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Recommender system&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8001&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that recommends one of the following movies based on the age of a user:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(&amp;lt;= 16\)&lt;/span&gt;&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;Lion King&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(17 - 25\)&lt;/span&gt;&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;Trainspotting&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(26 - 40\)&lt;/span&gt;&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;Matrix&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(41 - 60\)&lt;/span&gt;&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;Pulp Fiction&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(&amp;gt; 60\)&lt;/span&gt;&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;Breakfast at Tiffany's&quot;&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;The user enters their age and the program&amp;nbsp;outputs one title.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;19&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Trainspotting&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;71&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Breakfast at Tiffany's&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8001" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8001" />
                      <option name="index" value="25" />
                      <option name="name" value="Recommender system" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;19&quot;,&quot;Trainspotting&quot;],[&quot;71&quot;,&quot;Breakfast at Tiffany\u0027s&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Long live the king&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8441&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Figure out how many moves a chess king can make from a square with given coordinates. The coordinates are numbers between 1 and 8 inclusively. The first number indicates a column, the second one indicates a row.&lt;/p&gt; &#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;242&quot; src=&quot;https://ucarecdn.com/cbd97f5f-f89c-47d8-82e9-82de3b752632/&quot; width=&quot;236&quot;&gt;&lt;/p&gt; &#10;  &lt;p&gt;The king moves one square in any direction (horizontally, vertically, or diagonally). Other rules, as well as special moves, are not taken into account.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8441" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8441" />
                      <option name="index" value="26" />
                      <option name="name" value="Long live the king" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;3\n2&quot;,&quot;8&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Coordinates&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8443&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Locate a point on the Cartesian coordinate plane: which of four quadrants does a point belong to?&lt;/p&gt; &#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;266&quot; src=&quot;https://ucarecdn.com/cf481bb0-d62e-4b34-ace7-c8f26778759f/&quot; width=&quot;287&quot;&gt;&lt;/p&gt; &#10;  &lt;p&gt;Read two numbers from the input, not necessarily integers, the first number will indicate a position on the X-axis, the second one&amp;nbsp;— on the Y-axis. Let's keep referring to the quadrants by Roman numerals,&amp;nbsp;as shown in the picture.&lt;/p&gt; &#10;  &lt;p&gt;The points lying on the axes, with either&amp;nbsp;&lt;code class=&quot;java&quot;&gt;x = 0&lt;/code&gt; or &lt;code class=&quot;java&quot;&gt;y = 0&lt;/code&gt;,&amp;nbsp;and the origin &lt;code class=&quot;java&quot;&gt;(0, 0)&lt;/code&gt; will not appear in the tests.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3.987&lt;br&gt;-10&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;IV&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5926&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8443" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8443" />
                      <option name="index" value="27" />
                      <option name="name" value="Coordinates" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;3.987\n-10&quot;,&quot;IV&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Miles away&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8934&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Let's take your skill of converting&amp;nbsp;miles to kilometers to the next level! Define a function that accepts the number of miles and returns this distance in kilometers.&lt;/p&gt; &#10;  &lt;p&gt;Assume that one mile is approximately equal to &lt;samp&gt;1.609&lt;/samp&gt; kilometers.&lt;/p&gt; &#10;  &lt;p&gt;You don't have to handle input, just implement the&amp;nbsp;function.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8934" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8934" />
                      <option name="index" value="28" />
                      <option name="name" value="Miles away" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="def mi_to_km():&#10;    pass" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Fahrenheit&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8935&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Convert the temperature from Fahrenheit to Celsius in the function below. You can use this formula:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(C^\circ = (F^\circ - 32)\times \frac{5}{9}\)&lt;/span&gt;&lt;/p&gt; &#10;  &lt;p&gt;Round the returned result to &lt;em&gt;3&lt;/em&gt; decimal places.&lt;/p&gt; &#10;  &lt;p&gt;You don't have to handle input, just implement the&amp;nbsp;function below.&lt;/p&gt; &#10;  &lt;p&gt;Also, make sure your function &lt;em&gt;returns&lt;/em&gt; the value. Please&amp;nbsp;do &lt;em&gt;NOT&lt;/em&gt;&amp;nbsp;print anything.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-488').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-488&quot; style=&quot;display:none;&quot;&gt;&#10;   You can round a number to 3 decimal places with &#10;   &lt;code class=&quot;java&quot;&gt;round(number, 3)&lt;/code&gt;.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;451&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;232.778&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8935" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8935" />
                      <option name="index" value="29" />
                      <option name="name" value="Fahrenheit" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;451\n&quot;,&quot;232.778&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="def fahrenheit_to_celsius():&#10;    pass" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Make the function work&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5907&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The function &lt;code class=&quot;language-python&quot;&gt;closest_mod_5&lt;/code&gt; takes exactly one integer argument &lt;strong&gt;x&lt;/strong&gt; and returns the smallest integer &lt;strong&gt;y&amp;nbsp;&lt;/strong&gt;such that:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt; is greater than or equal to &lt;strong&gt;x&lt;/strong&gt;,&lt;/li&gt; &#10;   &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt; is divisible by 5.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Copy this code and edit the last line to make the function work:&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def closest_mod_5(x):&#10;    if x % 5 == 0:&#10;        return x&#10;    return &quot;I don't know :(&quot;&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;40&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;40&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;43&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;45&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 2s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5907" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5907" />
                      <option name="index" value="30" />
                      <option name="name" value="Make the function work" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;40&quot;,&quot;40&quot;],[&quot;43&quot;,&quot;45&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The Sum of 2&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5908&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Implement a function &lt;code class=&quot;java&quot;&gt;get_sum(a, b)&lt;/code&gt;&amp;nbsp;that will return&amp;nbsp;the sum of two numbers.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Don't bother about input/output. You just have to implement the&amp;nbsp;function which will return a value. Please, do not rename the function.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8 11&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;19&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5908" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5908" />
                      <option name="index" value="31" />
                      <option name="name" value="The Sum of 2" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;8 11&quot;,&quot;19&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# implement the function below&#10;def get_sum(a, b):&#10;    pass" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Define the function&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5911&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Define the function &lt;strong&gt;f(x)&lt;/strong&gt; that returns the value of the following function defined on the complete number scale:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\[f(x)= \begin{cases} &amp;nbsp; 1 - (x + 2)^2,\quad &amp;amp;\text{if } x\le -2\\ &amp;nbsp;-\frac x2 ,\quad &amp;amp;\text{if } -2 \lt x \le 2\\ &amp;nbsp; (x-2)^2 + 1,\quad &amp;amp;\text{if } x \gt 2 \end{cases}\]&lt;/span&gt;&lt;/p&gt; &#10;  &lt;p&gt;Just implement the function, handling input/output is &lt;em&gt;NOT&lt;/em&gt; required.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4.5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;7.25&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-4.5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;-5.25&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;-0.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5911" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5911" />
                      <option name="index" value="32" />
                      <option name="name" value="Define the function" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;4.5&quot;,&quot;7.25&quot;],[&quot;-4.5&quot;,&quot;-5.25&quot;],[&quot;1&quot;,&quot;-0.5&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="def f(x):&#10;    # put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Captain&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7284&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Define a function that will add the word &quot;captain&quot; before the name of a person.&lt;/p&gt; &#10;  &lt;p&gt;The function should be named &lt;code class=&quot;java&quot;&gt;captain_adder&lt;/code&gt;, take one argument &lt;code class=&quot;java&quot;&gt;name&lt;/code&gt;&amp;nbsp;and print the string, i.e. it doesn't have to return anything.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Sample Input:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Jack Sparrow&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Sample Output:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;captain Jack Sparrow&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5900&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7284" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7284" />
                      <option name="index" value="33" />
                      <option name="name" value="Captain" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# declare your function here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Cities&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6344&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Imagine you've created a program that plays the cities game with a user. For the game to work, you need to remember the user's city and be able to change it. Below is the code that does that, but there's a mistake in it. Find it and fix it!&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6322&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6344" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6344" />
                      <option name="index" value="34" />
                      <option name="name" value="Cities" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="user_city = &quot;Istanbul&quot;&#10;&#10;def change_city(new_user_city):&#10;    user_city = new_user_city&#10;&#10;change_city(&quot;Paris&quot;)&#10;print(user_city)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Arithmetic mean&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6070&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Calculate the arithmetic mean of a list. The arithmetic mean is a sum of all elements divided by their total number.&lt;/p&gt; &#10;  &lt;p&gt;Elements are given in the list &lt;code class=&quot;java&quot;&gt;numbers&lt;/code&gt;. Find their sum, divide it by the&amp;nbsp;number of elements and then print the result.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;10 15 1 6 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;7.0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6070" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6070" />
                      <option name="index" value="35" />
                      <option name="name" value="Arithmetic mean" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;10 15 1 6 3&quot;,&quot;7.0&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="numbers = [int(x) for x in input().split()]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;FizzBuzz&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8442&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;strong&gt;FizzBuzz &lt;/strong&gt;is a famous code challenge used in&amp;nbsp;interviews to test basic programming skills. It's time to write your own implementation.&lt;/p&gt; &#10;  &lt;p&gt;Print numbers from 1 to 100 &lt;strong&gt;inclusively &lt;/strong&gt;following these instructions:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;if a number is multiple of 3, print &lt;code class=&quot;java&quot;&gt;&quot;Fizz&quot;&lt;/code&gt; instead of this number&lt;/li&gt; &#10;   &lt;li&gt;if a number is multiple of 5, print &lt;code class=&quot;java&quot;&gt;&quot;Buzz&quot;&lt;/code&gt;&amp;nbsp;instead of this number&lt;/li&gt; &#10;   &lt;li&gt;for numbers that are multiples of both 3 and 5, print &lt;code class=&quot;java&quot;&gt;&quot;FizzBuzz&quot;&lt;/code&gt;&lt;/li&gt; &#10;   &lt;li&gt;print the rest of the numbers unchanged.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Output each value on a separate line.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8442" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8442" />
                      <option name="index" value="36" />
                      <option name="name" value="FizzBuzz" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The average of all numbers&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6071&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write the code that reads 2 numbers from the keyboard, &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;. As an output, it shows the average of all numbers that lie on the interval between &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b,&lt;/em&gt; and can be divided by 3.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;What does it mean? In the&amp;nbsp;example, you are to calculate the average of the numbers in the range&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\( [-5; 12] \)&lt;/span&gt;&lt;/p&gt; &#10;  &lt;p&gt;The numbers divided by 3 without the remainder&amp;nbsp;are:&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\( -3, 0, 3, 6, 9, 12 \)&lt;/span&gt;. There are six of them, and the average is 4.5.&lt;/p&gt; &#10;  &lt;p&gt;The input interval always contains at least one dividend of 3. Remember to include the values of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; in your calculations.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-5&lt;br&gt;12&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6071" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6071" />
                      <option name="index" value="37" />
                      <option name="name" value="The average of all numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;-5\n12&quot;,&quot;4.5&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Lucky 7&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6549&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Find all numbers that can be divided by 7 and print their squares.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;In the first line, there's an integer&lt;em&gt;&amp;nbsp;&lt;/em&gt;number of values &lt;em&gt;n.&lt;/em&gt;&lt;/p&gt; &#10;  &lt;p&gt;Then you'll receive &lt;em&gt;n&lt;/em&gt; lines with one&amp;nbsp;number on each.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;em&gt;m&lt;/em&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;lines with the squares of all numbers that can be divided by 7.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-419').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-419&quot; style=&quot;display:none;&quot;&gt;&#10;   You can write&amp;nbsp;&#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;to some variable and then call&amp;nbsp;&#10;   &lt;em&gt;input()&lt;/em&gt;&amp;nbsp;function exactly&amp;nbsp;&#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;times using&amp;nbsp;&#10;   &lt;em&gt;for&lt;/em&gt; loop.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;8&lt;br&gt;11&lt;br&gt;-49&lt;br&gt;0&lt;br&gt;3564 &lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2401&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6549" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6549" />
                      <option name="index" value="38" />
                      <option name="name" value="Lucky 7" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;5\n8\n11\n-49\n0\n3564 &quot;,&quot;2401\n0&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;A mean of n&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6818&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads an integer number&amp;nbsp;&lt;em&gt;n&lt;/em&gt;. This&amp;nbsp;is&amp;nbsp;a number of integer values you will receive on the next &lt;em&gt;n&lt;/em&gt;&amp;nbsp;lines. Your program should&amp;nbsp;compute&amp;nbsp;their mean value.&lt;/p&gt; &#10;  &lt;p&gt;Print the mean&amp;nbsp;as a float number.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-238').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-238&quot; style=&quot;display:none;&quot;&gt;&#10;   You can save&amp;nbsp;&#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;to a variable and then call the&amp;nbsp;&#10;   &lt;em&gt;input()&lt;/em&gt;&amp;nbsp;function exactly&amp;nbsp;&#10;   &lt;em&gt;n&lt;/em&gt;&amp;nbsp;times using&amp;nbsp;&#10;   &lt;em&gt;for&lt;/em&gt;&amp;nbsp;loop.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;5&lt;br&gt;-7&lt;br&gt;6&lt;br&gt;2&lt;br&gt;5&lt;br&gt;5&lt;br&gt;-7&lt;br&gt;-10&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;-0.125&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6818" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6818" />
                      <option name="index" value="39" />
                      <option name="name" value="A mean of n" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;8\n5\n-7\n6\n2\n5\n5\n-7\n-10\n&quot;,&quot;-0.125&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Vowel count&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7199&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Have a look at the program that iterates through&amp;nbsp;&lt;code class=&quot;java&quot;&gt;string&lt;/code&gt; and counts vowels in it. Fill in the blank to make it work.&lt;/p&gt; &#10;  &lt;p&gt;Note that you do&amp;nbsp;&lt;em&gt;NOT&amp;nbsp;&lt;/em&gt;have to print anything.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7199" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7199" />
                      <option name="index" value="40" />
                      <option name="name" value="Vowel count" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="string = &quot;red yellow fox bite orange goose beeeeeeeeeeep&quot;&#10;vowels = 'aeiou'&#10;count = 0&#10;&#10;# fix this for loop&#10;for letter in ...:&#10;    if letter in vowels:&#10;        count += 1" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Speech generation&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8438&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Here is your chance to write instructions for a text-to-speech system. Let's focus on reading phone numbers aloud. The input phone number&amp;nbsp;will consist&amp;nbsp;solely of digits. Print the name of each digit on a new line for the system to read them one by one.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-318').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-318&quot; style=&quot;display:none;&quot;&gt;&#10;   You can store the digit names in a container, e.g. in&amp;nbsp;a list with the names from 0 to 9 &#10;   &lt;code class=&quot;java&quot;&gt;digits = ['zero', 'one', 'two', ..., 'nine']&lt;/code&gt;, and refer to each digit by index, &#10;   &lt;code class=&quot;java&quot;&gt;digits[2]&lt;/code&gt; equals to &#10;   &lt;code class=&quot;java&quot;&gt;'two'&lt;/code&gt;,&amp;nbsp;etc. Mind the type, an index should be an interger, not a string.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4901825&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;four&lt;br&gt;nine&lt;br&gt;zero&lt;br&gt;one&lt;br&gt;eight&lt;br&gt;two&lt;br&gt;five&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6065&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8438" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8438" />
                      <option name="index" value="41" />
                      <option name="name" value="Speech generation" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;4901825&quot;,&quot;four\nnine\nzero\none\neight\ntwo\nfive&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Palindrome&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6518&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Palindrome is a word or a text that reads the same backward as forward. Create a program that checks if the word is palindrome.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Word that needs to be checked. It is guaranteed that the word will be of even length.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;If the word is palindrome, write&amp;nbsp;&lt;strong&gt;Palindrome.&amp;nbsp;&lt;/strong&gt;Otherwise, write &lt;strong&gt;Not palindrome&lt;/strong&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;noon&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Palindrome&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;banana&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Not palindrome&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6518" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6518" />
                      <option name="index" value="42" />
                      <option name="name" value="Palindrome" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;noon&quot;,&quot;Palindrome&quot;],[&quot;banana&quot;,&quot;Not palindrome&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Game over&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6609&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In&amp;nbsp;online test games, there&amp;nbsp;is usually a limited number of lives: if, for example, you make 3 mistakes, you lose and do not continue with the game. Imagine you are trying to implement that system to an existing online test that doesn't have it yet.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;A line with &lt;strong&gt;N&lt;/strong&gt;&amp;nbsp;scores of a user in a test game separated by a space: &lt;strong&gt;C&amp;nbsp;&lt;/strong&gt;for the correct answer and &lt;strong&gt; I&amp;nbsp;&lt;/strong&gt;for the incorrect answer.&amp;nbsp;&lt;strong&gt;N&amp;nbsp;&lt;/strong&gt;will be between 15 and 50.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;If the user loses the game, print &quot;&lt;strong&gt;Game over&quot;&amp;nbsp;&lt;/strong&gt;and their score (how many correct answers they&amp;nbsp;gave).&amp;nbsp;If the user wins, print&amp;nbsp;&lt;strong&gt;&quot;You won&quot;&amp;nbsp;&lt;/strong&gt; and their score. The message should be printed without&amp;nbsp;quotation marks. The message and the score should be printed on separate lines.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;C C C I C C C C I I C C C C C C C C C&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Game over&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;C C I I C C C C C C C C C C C&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;You won&lt;br&gt;13&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6609" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6609" />
                      <option name="index" value="43" />
                      <option name="name" value="Game over" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;C C C I C C C C I I C C C C C C C C C&quot;,&quot;Game over\n7&quot;],[&quot;C C I I C C C C C C C C C C C&quot;,&quot;You won\n13&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="scores = input().split()&#10;# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Prime number&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5931&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Determine whether the input number is a prime number. Remember that any prime number is greater than &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output options:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;This number is prime&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;This number is not prime&lt;/code&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;This number is not prime&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;This number is prime&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5931" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5931" />
                      <option name="index" value="44" />
                      <option name="name" value="Prime number" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;1&quot;,&quot;This number is not prime&quot;],[&quot;7&quot;,&quot;This number is prime&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Process integer input&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6307&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads integers from the console, one number per line.&lt;/p&gt; &#10;  &lt;p&gt;For each input number you should check:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;if the number is &lt;strong&gt;less than 10&lt;/strong&gt;, then skip this number;&lt;/li&gt; &#10;   &lt;li&gt;if the number is &lt;strong&gt;greater than 100&lt;/strong&gt;, then stop reading numbers from the console;&lt;/li&gt; &#10;   &lt;li&gt;in other cases, print this number back to the console on a separate line.&lt;/li&gt; &#10;  &lt;/ul&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;12&lt;br&gt;4&lt;br&gt;2&lt;br&gt;58&lt;br&gt;112&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;12&lt;br&gt;58&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;101&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;102&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6307" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6307" />
                      <option name="index" value="45" />
                      <option name="name" value="Process integer input" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;12\n4\n2\n58\n112&quot;,&quot;12\n58&quot;],[&quot;101&quot;,&quot;&quot;],[&quot;1\n2\n102&quot;,&quot;&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Count up the squares&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6308&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads from the console integers (one in a line) until &lt;strong&gt;their&lt;/strong&gt;&amp;nbsp;&lt;strong&gt;sum&lt;/strong&gt;&amp;nbsp;is equal to &lt;strong&gt;0&lt;/strong&gt;. Immediately after that, it should&amp;nbsp;display&amp;nbsp;&lt;strong&gt;the sum of the squares&lt;/strong&gt; of all the entered numbers.&lt;/p&gt; &#10;  &lt;p&gt;It is guaranteed that at some point the sum of the entered numbers will be equal to 0.&amp;nbsp;After that, reading is &lt;strong&gt;not necessary&lt;/strong&gt;&amp;nbsp;to continue.&lt;/p&gt; &#10;  &lt;p&gt;In case&amp;nbsp;the first integer equals to 0, also stop reading values from the input. Print out 0 instead of the sum of the squares.&lt;/p&gt; &#10;  &lt;p&gt;For example, we are reading the numbers &lt;samp&gt;1, -3, 5, -6, -10, 13.&lt;/samp&gt;&amp;nbsp;At this point, we have noticed that the sum of these numbers is 0 and output the sum of their squares, not paying attention to the fact that there are still unread values.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;-3&lt;br&gt;5&lt;br&gt;-6&lt;br&gt;-10&lt;br&gt;13&lt;br&gt;4&lt;br&gt;-8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;340&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6308" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6308" />
                      <option name="index" value="46" />
                      <option name="name" value="Count up the squares" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;1\n-3\n5\n-6\n-10\n13\n4\n-8&quot;,&quot;340&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Vowels and consonants&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6607&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Let's work with texts! You'll get a sequence of characters (a word, a sentence or just gibberish). For each character tell if it's a vowel or a consonant. If you hit a non-alphabetic symbol, just stop processing.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;One line with &lt;strong&gt;N&lt;/strong&gt; characters.&lt;/p&gt; &#10;  &lt;p&gt;We will use letters&amp;nbsp;from the English alphabet. The symbols&amp;nbsp;&lt;code class=&quot;java&quot;&gt;aeiou&lt;/code&gt; are considered vowels. Treat the rest of the letters as consonants.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Print &quot;vowel&quot; if the character is a vowel, and &quot;consonant&quot; if the character is consonant. Stop printing information at the first non-alphabetic symbol.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;somegibberish&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;normal phrase&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;weusedtowritewithnospaces&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;vowel&lt;br&gt;consonant&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6607" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6607" />
                      <option name="index" value="47" />
                      <option name="name" value="Vowels and consonants" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;somegibberish&quot;,&quot;consonant\nvowel\nconsonant\nvowel\nconsonant\nvowel\nconsonant\nconsonant\nvowel\nconsonant\nvowel\nconsonant\nconsonant\n&quot;],[&quot;normal phrase&quot;,&quot;consonant\nvowel\nconsonant\nconsonant\nvowel\nconsonant\n&quot;],[&quot;weusedtowritewithnospaces&quot;,&quot;consonant\nvowel\nvowel\nconsonant\nvowel\nconsonant\nconsonant\nvowel\nconsonant\nconsonant\nvowel\nconsonant\nvowel\nconsonant\nvowel\nconsonant\nconsonant\nconsonant\nvowel\nconsonant\nconsonant\nvowel\nconsonant\nvowel\nconsonant\n&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Party time&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/9147&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;James is hosting a party today. He decided to welcome all new guests personally. To remember their names, James kindly asks you to write them in a list. Read the names from the input, each on a new line, and stop at a single period&amp;nbsp;&lt;code class=&quot;java&quot;&gt;.&lt;/code&gt; that denotes the end of the sequence.&lt;/p&gt; &#10;  &lt;p&gt;Print your&amp;nbsp;list and its length (the number of guests) for James.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Katja&lt;br&gt;Adam&lt;br&gt;Eva&lt;br&gt;Nicholas&lt;br&gt;.&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;['Katja', 'Adam', 'Eva', 'Nicholas']&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/9147" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9147" />
                      <option name="index" value="48" />
                      <option name="name" value="Party time" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Katja\nAdam\nEva\nNicholas\n.&quot;,&quot;[\u0027Katja\u0027, \u0027Adam\u0027, \u0027Eva\u0027, \u0027Nicholas\u0027]\n4&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The mean&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/9148&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Calculate the arithmetic mean of integer numbers. You will receive the integers on separate lines. The numeric sequence ends with a period &lt;code class=&quot;java&quot;&gt;.&lt;/code&gt;, so stop reading the input on it.&lt;/p&gt; &#10;  &lt;p&gt;There will always be at least one number.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;2&lt;br&gt;.&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/9148" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9148" />
                      <option name="index" value="49" />
                      <option name="name" value="The mean" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;5\n2\n.&quot;,&quot;3.5&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Cat cafés&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/9149&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Kitty wants to visit a cat&amp;nbsp;café! Help her find the one with the largest number of cats.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input format&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Each string contains a café's name followed by a space and the number of cats in it, e.g. &lt;code class=&quot;java&quot;&gt;Paws 11&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;Kittens 9&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;The names would be one-word only. Read input lines until you get a string &lt;code class=&quot;java&quot;&gt;MEOW&lt;/code&gt; (without any number).&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Output format&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The&amp;nbsp;café with the maximum number of cats.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-539').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-539&quot; style=&quot;display:none;&quot;&gt;&#10;   Use &#10;   &lt;code class=&quot;java&quot;&gt;str.split()&lt;/code&gt; to separate the name from the integer number, for example, &#10;   &lt;code class=&quot;java&quot;&gt;'Paws 11'.split()&lt;/code&gt; will give you a list &#10;   &lt;code class=&quot;java&quot;&gt;['Paws', '11']&lt;/code&gt;.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Paws 11&lt;br&gt;Kittens 9&lt;br&gt;MEOW&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Paws&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/9149" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9149" />
                      <option name="index" value="50" />
                      <option name="name" value="Cat cafés" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Paws 11\nKittens 9\nMEOW&quot;,&quot;Paws&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Small scale&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/9150&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Read lines with&amp;nbsp;floats&amp;nbsp;from the input until you get a single period &lt;code class=&quot;java&quot;&gt;.&lt;/code&gt; that signals you to stop.&lt;/p&gt; &#10;  &lt;p&gt;Find the minimum of these numbers and print it out.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;11.1&lt;br&gt;2.05&lt;br&gt;4.0&lt;br&gt;.&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2.05&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6302&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/9150" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9150" />
                      <option name="index" value="51" />
                      <option name="name" value="Small scale" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;11.1\n2.05\n4.0\n.&quot;,&quot;2.05&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Beautify both output and code&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6077&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The output should be user-friendly, but the code part is also important. Well-structured and readable code is very important for being a good programmer. Now it's up to you to decide, which formatting method to choose.&lt;/p&gt; &#10;  &lt;p&gt;Imagine you need to compose&amp;nbsp;a dynamic URL for every certain user with user-specific details. Suppose, you want to send different URLs for every user, depending on their name and profession. The base would be something like&lt;/p&gt; &#10;  &lt;p&gt;&quot;http://example.com/*&lt;strong&gt;nickname&lt;/strong&gt;*/desirable/*&lt;strong&gt;profession&lt;/strong&gt;*/profile&quot;, where nickname and profession are prompts from a user and are dynamic.&lt;/p&gt; &#10;  &lt;p&gt;Prompt a user for their nickname and profession and print a user-specific URL. Don't bother about any rules&amp;nbsp;of composing the URLs&amp;nbsp;and just use raw input to accomplish the task.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;raybeam&lt;br&gt;cereal-killer&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;http://example.com/raybeam/desirable/cereal-killer/profile&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;AnnMelon&lt;br&gt;bodybuilder&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;http://example.com/AnnMelon/desirable/bodybuilder/profile&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6077" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6077" />
                      <option name="index" value="52" />
                      <option name="name" value="Beautify both output and code" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;raybeam\ncereal-killer&quot;,&quot;http://example.com/raybeam/desirable/cereal-killer/profile&quot;],[&quot;AnnMelon\nbodybuilder&quot;,&quot;http://example.com/AnnMelon/desirable/bodybuilder/profile&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Film&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6895&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that gets information&amp;nbsp;about a movie from the input and presents in the following format:&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;movie&amp;nbsp;(dir. director) came out in year&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;3 lines: first the title of the movie, then the name of the director and then the year of its release.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Fight Club&lt;br&gt;David Fincher&lt;br&gt;1999&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Fight Club (dir. David Fincher) came out in 1999&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6895" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6895" />
                      <option name="index" value="53" />
                      <option name="name" value="Film" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Fight Club\nDavid Fincher\n1999&quot;,&quot;Fight Club (dir. David Fincher) came out in 1999&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Decimal places&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6894&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Round the number from input to the required number of decimals.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Two lines: the first with a &lt;em&gt;floating-point&lt;/em&gt; number, the second with an &lt;em&gt;integer&lt;/em&gt;&amp;nbsp;representing the decimal count.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The rounded number.&lt;/p&gt; &#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;   Do &#10;   &lt;samp&gt;NOT&lt;/samp&gt;&amp;nbsp;forget to convert the input numbers and to enclose each value in &#10;   &lt;samp&gt;{}&lt;/samp&gt; in a formatted string.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-497').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-497&quot; style=&quot;display:none;&quot;&gt;&#10;   We encourage you to use string formatting, since solutions with &#10;   &lt;code class=&quot;java&quot;&gt;round()&lt;/code&gt; function may not pass the tests. Besides, this is exactly what the topic is about!&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2.71828&lt;br&gt;3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2.718&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6894" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6894" />
                      <option name="index" value="54" />
                      <option name="name" value="Decimal places" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;2.71828\n3&quot;,&quot;2.718&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Tax brackets&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6519&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;   Whoa! This problem is much more complex than the usual one and requires knowledge of &#10;   &lt;strong&gt;if-elif-else&lt;/strong&gt;&amp;nbsp;statements. If you're feeling up to the challenge, brace yourself and good luck! Otherwise, you can skip it for now and return any time later&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt; &#10;  &lt;p&gt;In progressive tax systems, tax rates change according to the income. Tax brackets are divisions that regulate those changes.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Here's an example of tax brackets in a certain tax system:&lt;/p&gt; &#10;  &lt;p&gt;0 — 15,527: 0% tax&lt;/p&gt; &#10;  &lt;p&gt;15,528 — 42,707: 15% tax&lt;/p&gt; &#10;  &lt;p&gt;42,708 —&amp;nbsp;132,406: 25% tax&lt;/p&gt; &#10;  &lt;p&gt;132,407 and more: 28% tax&lt;/p&gt; &#10;  &lt;p&gt;Suppose we use a simplified version of taxation and apply one&amp;nbsp;tax rate to the entire amount of money.&lt;/p&gt; &#10;  &lt;p&gt;Write a program that calculates the tax that a person's going to pay based on their income.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The value of someone's taxable income (in dollars).&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;The tax for {income} is {percent}%.&amp;nbsp;That is {calculated_tax} dollars!&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;Round&amp;nbsp;your&amp;nbsp;&lt;code class=&quot;java&quot;&gt;calculated_tax&lt;/code&gt;&amp;nbsp;to the nearest integer.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;14378&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;The tax for 14378 is 0%. That is 0 dollars!&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;99999&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;The tax for 99999 is 25%. That is 25000 dollars!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6519" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6519" />
                      <option name="index" value="55" />
                      <option name="name" value="Tax brackets" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;14378&quot;,&quot;The tax for 14378 is 0%. That is 0 dollars!&quot;],[&quot;99999&quot;,&quot;The tax for 99999 is 25%. That is 25000 dollars!&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="How long is that word?" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;How long is that word?&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6896&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that calculates the length of the word from the&amp;nbsp;input and prints it out together with the word in the format &lt;code class=&quot;java&quot;&gt;word has N letters&lt;/code&gt;.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-204').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-204&quot; style=&quot;display:none;&quot;&gt;&#10;   The length of the string can be calculated with the &#10;   &lt;code class=&quot;java&quot;&gt;len()&lt;/code&gt; function.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;serendipity&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;serendipity has 11 letters&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6896" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6896" />
                      <option name="index" value="56" />
                      <option name="name" value="How long is that word" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;serendipity&quot;,&quot;serendipity has 11 letters&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Round pi&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6900&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a code that rounds the number &lt;em&gt;pi&lt;/em&gt; to 5 decimal places and prints it out.&lt;/p&gt; &#10;  &lt;p&gt;We've defined the&amp;nbsp;variable &lt;code class=&quot;java&quot;&gt;pi&lt;/code&gt; for you.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6037&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6900" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6900" />
                      <option name="index" value="57" />
                      <option name="name" value="Round pi" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="pi = 3.141592653589793&#10;# put your python code here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The Creator&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6666&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Imagine for a second that you're a God and create a class&amp;nbsp;&lt;strong&gt;Human.&amp;nbsp;&lt;/strong&gt;Humans are a species called &quot;&lt;em&gt;Homo Sapiens&quot;&lt;/em&gt; and they (usually) have &lt;strong&gt;2&lt;/strong&gt; legs and &lt;strong&gt;2&lt;/strong&gt; arms. Create the attributes &lt;strong&gt;species, n_legs,&amp;nbsp;&lt;/strong&gt;and &lt;strong&gt;n_arms&amp;nbsp;&lt;/strong&gt;for your class &lt;strong&gt;Human&lt;/strong&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6661&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6666" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6666" />
                      <option name="index" value="58" />
                      <option name="name" value="The Creator" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# create a Human here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Let's rock&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6667&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There are many bands in the world that perform all kinds of music. Let's suppose for a second that you're a fan of rock and want to create a program that deals with rock bands.&lt;/p&gt; &#10;  &lt;p&gt;For that, you&amp;nbsp;obviously&amp;nbsp;need the class &lt;code class=&quot;java&quot;&gt;RockBand&lt;/code&gt; with such attributes as&amp;nbsp;&lt;code class=&quot;java&quot;&gt;genre&lt;/code&gt; (&quot;rock&quot;),&amp;nbsp;&lt;code class=&quot;java&quot;&gt;n_members&lt;/code&gt;(4, by default) and&amp;nbsp;&lt;code class=&quot;java&quot;&gt;famous_songs&lt;/code&gt; (an empty list as a default value). Create this class and an object of that class: name the variable after any rock band that you like.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;You do NOT need to fill the &lt;code class=&quot;java&quot;&gt;famous_songs&lt;/code&gt; attribute, leave the default value.&lt;/p&gt; &#10;  &lt;p&gt;Print the attributes of your rock band on separate lines in this order:&amp;nbsp;&lt;strong&gt;genre,&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;n_members, famous_songs.&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-759').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-759&quot; style=&quot;display:none;&quot;&gt;&#10;   Make sure that the attributes have correct types: &#10;   &lt;code class=&quot;java&quot;&gt;genre&lt;/code&gt; is a string, &#10;   &lt;code class=&quot;java&quot;&gt;n_members&lt;/code&gt; is an integer, and &#10;   &lt;code class=&quot;java&quot;&gt;famous_songs&lt;/code&gt; is a list.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6661&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6667" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6667" />
                      <option name="index" value="59" />
                      <option name="name" value="Let's rock" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# start a RockBand here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The housing problem&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6665&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The code below defines the class &lt;strong&gt;House&lt;/strong&gt; and an object of that class.&amp;nbsp;However, the code is somewhat incorrect. Fix the mistakes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6661&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6665" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6665" />
                      <option name="index" value="60" />
                      <option name="name" value="The housing problem" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="Class House():&#10;    construction = &quot;building&quot;&#10;    elevator = True&#10;&#10;h = House(&quot;building&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Who is who&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6668&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There are two classes:&amp;nbsp;&lt;code class=&quot;language-python&quot;&gt;Angel&lt;/code&gt; and&amp;nbsp;&lt;code class=&quot;language-python&quot;&gt;Demon&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;They have certain characteristics that&amp;nbsp;help tell them apart. Both of these classes have 3 common class attributes with different values:&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Angel:&#10;    color = &quot;white&quot;&#10;    feature = &quot;wings&quot;&#10;    home = &quot;Heaven&quot;&#10;        &#10;        &#10;class Demon:&#10;    color = &quot;red&quot;&#10;    feature = &quot;horns&quot;&#10;    home = &quot;Hell&quot;&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;Suppose there is a mysterious object called &lt;code class=&quot;language-python&quot;&gt;mystery_entity&lt;/code&gt;. Print its attributes to find out whether this entity is an angel or a demon. You should print the attributes in this order: &lt;code class=&quot;language-python&quot;&gt;color&lt;/code&gt;, &lt;code class=&quot;language-python&quot;&gt;feature&lt;/code&gt;, &lt;code class=&quot;language-python&quot;&gt;home&lt;/code&gt;. Each should be on a separate line.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-736').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-736&quot; style=&quot;display:none;&quot;&gt;&#10;   Class instances have access to class attributes.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6661&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6668" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6668" />
                      <option name="index" value="61" />
                      <option name="name" value="Who is who" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# mystery_entity has already been defined&#10;# print its class attributes" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Pumpkin&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8092&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Below is the class &lt;code class=&quot;java&quot;&gt;Dog&lt;/code&gt; with the &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; method. Imagine, you have a dog named &lt;strong&gt;Pumpkin&lt;/strong&gt;. Create an instance of the class &lt;code class=&quot;java&quot;&gt;Dog&lt;/code&gt; representing Pumpkin. The name of the variable should be &lt;code class=&quot;java&quot;&gt;pumpkin&lt;/code&gt;. Do &lt;em&gt;NOT&lt;/em&gt; print anything.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6669&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8092" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8092" />
                      <option name="index" value="62" />
                      <option name="name" value="Pumpkin" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Dog:&#10;    def __init__(self, name):&#10;        self.name = name&#10;&#10;&#10;# create pumpkin" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Movie night&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6674&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write the class &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Movie&lt;/code&gt;&lt;/strong&gt; and define the class constructor with such parameters as the &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;title&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;director&lt;/code&gt;&lt;/strong&gt;, and the &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;year&lt;/code&gt;&lt;/strong&gt; of release.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;In the corresponding variables defined below, create&amp;nbsp;such objects as the &quot;Titanic&quot; (dir. James Cameron, 1997), &quot;Star Wars&quot; (dir. George Lucas, 1977) and &quot;Fight Club&quot; (dir. David Fincher, 1999).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6669&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6674" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6674" />
                      <option name="index" value="63" />
                      <option name="name" value="Movie night" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Movie:&#10;    # create class here&#10;&#10;&#10;# objects of the class Movie&#10;titanic = # ...&#10;star_wars = # ...&#10;fight_club = # ..." />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Right triangle&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6676&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;A right triangle is a triangle in which one angle is a right angle (90-degree angle). The side opposite to the right angle is called a&amp;nbsp;&lt;em&gt;hypotenuse&amp;nbsp;&lt;/em&gt;and the other two sides are called &lt;em&gt;legs&amp;nbsp;&lt;/em&gt;(or&amp;nbsp;&lt;em&gt;catheti&lt;/em&gt;).&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;The&amp;nbsp;&lt;em&gt;Pythagorean theorem&amp;nbsp;&lt;/em&gt;holds for right triangles with integer lengths of all sides:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(c^2 = a^2 + b^2\)&lt;/span&gt;, where&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(c\)&lt;/span&gt; is the length of the hypotenuse, and&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(a\)&lt;/span&gt; and&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(b\)&lt;/span&gt; are the lengths of the legs.&lt;/p&gt; &#10;  &lt;p&gt;Here's a class&amp;nbsp;&lt;strong&gt;RightTriangle&amp;nbsp;&lt;/strong&gt;with the class constructor. The constructor is missing the&amp;nbsp;&lt;strong&gt;area&amp;nbsp;&lt;/strong&gt;attribute. Calculate the area &lt;strong&gt;S&lt;/strong&gt;&amp;nbsp;according to this formula:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(S = \frac{1}{2}ab\)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;For the triangles from the input determine if they're right and calculate their area. If the triangle is not&amp;nbsp;right, print &quot;&lt;strong&gt;Not right&quot;.&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Three integer numbers separated by a space in&amp;nbsp;descending order: first, the length of the supposed&amp;nbsp;hypotenuse, and then the lengths of two legs.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;If the triangle with the input lengths is a right triangle, print its area (with one decimal). If the triangle is not right, print &quot;&lt;strong&gt;Not right&quot;.&lt;/strong&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5 3 4&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;6.0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4 3 2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Not right&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6669&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6676" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6676" />
                      <option name="index" value="64" />
                      <option name="name" value="Right triangle" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;5 3 4&quot;,&quot;6.0&quot;],[&quot;4 3 2&quot;,&quot;Not right&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class RightTriangle:&#10;    def __init__(self, hyp, leg_1, leg_2):&#10;        self.c = hyp&#10;        self.a = leg_1&#10;        self.b = leg_2&#10;        # calculate the area here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Shopping&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6673&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Find the mistakes in the &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; method of the class&amp;nbsp;&lt;strong&gt;Store&amp;nbsp;&lt;/strong&gt;and fix them so that the attributes of the object&amp;nbsp;&lt;strong&gt;shop&amp;nbsp;&lt;/strong&gt;would be printed out correctly.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6669&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6673" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6673" />
                      <option name="index" value="65" />
                      <option name="name" value="Shopping" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Store:&#10;    def __init__(name, category):&#10;        name = self.name&#10;&#10;shop = Store(&quot;GAP&quot;, &quot;clothes&quot;)&#10;print(shop.name, shop.category)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Students&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6675&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;John works at the university. He deals with the information about a lot of students and he decided to create a program that would help him with it.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;He devised a system for creating an &lt;strong&gt;id&lt;/strong&gt; for each student: first letter of the name, last name and then the birth year. For example, the id for John Smith (b. 1989) would look like &lt;code class=&quot;java&quot;&gt;JSmith1989&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;John needs help finishing the code for the id and then applying it to the students. Create an instance attribute&amp;nbsp;&lt;strong&gt;id&amp;nbsp;&lt;/strong&gt;in the &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; method, calculate it and then print its value for the student.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;Student information: the first line has &lt;strong&gt;the name&lt;/strong&gt;, the second has &lt;strong&gt;the last name&lt;/strong&gt;, and the third has &lt;strong&gt;the birth year&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The&amp;nbsp;&lt;strong&gt;id&amp;nbsp;&lt;/strong&gt;of the student.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Daniel&lt;br&gt;Smith&lt;br&gt;1993&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;DSmith1993&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6669&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6675" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6675" />
                      <option name="index" value="66" />
                      <option name="name" value="Students" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Daniel\nSmith\n1993&quot;,&quot;DSmith1993&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Student:&#10;&#10;    def __init__(self, name, last_name, birth_year):&#10;        self.name = name&#10;        self.last_name = last_name&#10;        self.birth_year = birth_year&#10;        # calculate the id here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Fish in the water&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6682&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The class&amp;nbsp;&lt;strong&gt;Fish&amp;nbsp;&lt;/strong&gt;stores information about all the fish in some aquarium. One of the class attributes in the&amp;nbsp;&lt;strong&gt;n_fish&amp;nbsp;&lt;/strong&gt;which corresponds to the number of fish that have been created (and are now in the aquarium).&lt;/p&gt; &#10;  &lt;p&gt;In the code below, you can see that there's&amp;nbsp;&lt;strong&gt;greg,&amp;nbsp;&lt;/strong&gt;the only fish that has been created so far. Update the value of&amp;nbsp;&lt;strong&gt;n_fish&amp;nbsp;&lt;/strong&gt;in the correct way.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-435').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-435&quot; style=&quot;display:none;&quot;&gt;&#10;   Remember that integer is an immutable type and class attributes of this&amp;nbsp;kind have to be accessed through the class itself so that changes affect all instances of the class.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6677&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6682" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6682" />
                      <option name="index" value="67" />
                      <option name="name" value="Fish in the water" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Fish:&#10;    place = &quot;aquarium&quot;&#10;    n_fish = 0  # number of fish in the aquarium&#10;&#10;    def __init__(self, name, kind):&#10;        self.name = name&#10;        self.kind = kind&#10;&#10;&#10;greg = Fish(&quot;Greg&quot;, &quot;guppy&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;User&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6681&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You&amp;nbsp;need to create a class of Users for your project. Here are some attributes that you'll need:&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;active&lt;/code&gt;&amp;nbsp;— a boolean attribute that indicates whether a user is active at the moment,&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;java&quot;&gt;n_active&lt;/code&gt;&amp;nbsp;&lt;/strong&gt;— the number of active users,&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;java&quot;&gt;user_name&lt;/code&gt;&amp;nbsp;&lt;/strong&gt;— string with the username,&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;java&quot;&gt;users&lt;/code&gt; &lt;/strong&gt;—&amp;nbsp;a list of all users.&lt;/p&gt; &#10;  &lt;p&gt;Think about which attributes should be &lt;em&gt;class attributes &lt;/em&gt;and&amp;nbsp;which should be &lt;em&gt;instance ones&lt;/em&gt;. Then create that class below.&lt;/p&gt; &#10;  &lt;p&gt;If there are 2 or more instance attributes, in the &lt;code class=&quot;java&quot;&gt;__init__()&lt;/code&gt; method,&amp;nbsp;list them in &lt;strong&gt;alphabetical&lt;/strong&gt; order!&lt;/p&gt; &#10;  &lt;p&gt;NOTE: in this task, you just need to define the class. You do NOT need to create an instance or print anything. You are also NOT required to write any additional code (for example, for modifying class attributes).&amp;nbsp;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6677&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6681" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6681" />
                      <option name="index" value="68" />
                      <option name="name" value="User" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class User:&#10;    # create the class here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Sphere&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6683&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In her projects, Jess works with various geometrical objects. To simplify the process, she needs to create different classes for the shapes.&lt;/p&gt; &#10;  &lt;p&gt;One of these shapes is a &lt;strong&gt;sphere&lt;/strong&gt;. There are 3 characteristics she needs for the sphere: the&amp;nbsp;&lt;em&gt;PI&amp;nbsp;&lt;/em&gt;number, the&amp;nbsp;&lt;em&gt;radius &lt;strong&gt;r&amp;nbsp;&lt;/strong&gt;&lt;/em&gt;and the&amp;nbsp;&lt;em&gt;volume&amp;nbsp;&lt;strong&gt;v&amp;nbsp;&lt;/strong&gt;&lt;/em&gt;of the particular sphere.&lt;/p&gt; &#10;  &lt;p&gt;The volume is calculated according to this formula:&amp;nbsp;&lt;strong&gt;&lt;span class=&quot;math-tex&quot;&gt;\(v = \frac {4}{3} \pi r^3\)&lt;/span&gt;&lt;/strong&gt;.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Finish writing the code below: determine which attributes are class or instance attributes, and do necessary calculations. Make sure to name the attributes like they are presented above (that is, &lt;code class=&quot;java&quot;&gt;PI&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;radius&lt;/code&gt;, and &lt;code class=&quot;java&quot;&gt;volume&lt;/code&gt;.) Use&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(\pi \approx 3.1415\)&lt;/span&gt;&amp;nbsp;(for checkup purposes).&lt;/p&gt; &#10;  &lt;p&gt;You do NOT need to create any instances of the class or work with input.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-965').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-965&quot; style=&quot;display:none;&quot;&gt;&#10;   The constant can be stored as a class variable, the&amp;nbsp;&#10;   &lt;em&gt;radius&amp;nbsp;&lt;/em&gt;can be passed as a parameter to the &#10;   &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; method, and &#10;   &lt;em&gt;volume&lt;/em&gt; can be calculated within the &#10;   &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt;.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6677&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6683" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6683" />
                      <option name="index" value="69" />
                      <option name="name" value="Sphere" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Sphere:&#10;    # finish class Sphere here&#10;    ..." />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The Louvre&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6684&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You are writing a program that deals with the paintings that hang in the Louvre. You've created a class &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Painting&lt;/code&gt;&lt;/strong&gt; and are planning to add some class methods and a class constructor.&lt;/p&gt; &#10;  &lt;p&gt;What'll be common for all paintings is that they all belong to the same &lt;em&gt;museum&lt;/em&gt;, obviously, but the differences will be in the &lt;em&gt;title&lt;/em&gt; of the painting, the &lt;em&gt;painter&lt;/em&gt; and the&lt;em&gt; year of creation&lt;/em&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Finish writing the class &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Painting&lt;/code&gt;&lt;/strong&gt; and then process some information from the input.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The input contains 3 lines: the first is the &lt;strong&gt;title &lt;/strong&gt;of the painting, the second with the &lt;strong&gt;artist &lt;/strong&gt;and the third with the &lt;strong&gt;year &lt;/strong&gt;of the creation.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;A string of the kind: &lt;code class=&quot;java&quot;&gt;&quot;Title&quot; by Artist (Year) hangs in the Louvre.&lt;/code&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-950').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-950&quot; style=&quot;display:none;&quot;&gt;&#10;   Remember which information should be in the class variables, and which in the instance variables.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Mona Lisa&lt;br&gt;Leonardo da Vinci&lt;br&gt;1503&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;&quot;Mona Lisa&quot; by Leonardo da Vinci (1503) hangs in the Louvre.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6677&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6684" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6684" />
                      <option name="index" value="70" />
                      <option name="name" value="The Louvre" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Mona Lisa\nLeonardo da Vinci\n1503&quot;,&quot;\&quot;Mona Lisa\&quot; by Leonardo da Vinci (1503) hangs in the Louvre.&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Painting:" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Keep on sailing&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6936&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Redefine the method &lt;code class=&quot;java&quot;&gt;sail&lt;/code&gt; of our class &lt;code class=&quot;java&quot;&gt;Ship&lt;/code&gt; so that it would take the destination and then tell where the ship is going. Call this method on the &lt;code class=&quot;java&quot;&gt;black_pearl&lt;/code&gt; object that's defined in the code below.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The name of the country or the city where the ship is going.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The result of the updated &lt;code class=&quot;java&quot;&gt;sail&lt;/code&gt; method: a message structured like &lt;code class=&quot;java&quot;&gt;&quot;The&amp;nbsp;{name of the ship}&amp;nbsp;has sailed for&amp;nbsp;{country/city}!&quot;&lt;/code&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Argentina&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;The Black Pearl has sailed for Argentina!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6931&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6936" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6936" />
                      <option name="index" value="71" />
                      <option name="name" value="Keep on sailing" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;Argentina&quot;,&quot;The Black Pearl has sailed for Argentina!&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# our class Ship&#10;class Ship:&#10;    def __init__(self, name, capacity):&#10;        self.name = name&#10;        self.capacity = capacity&#10;        self.cargo = 0&#10;&#10;    # the old sail method that you need to rewrite&#10;    def sail(self):&#10;        print(&quot;{} has sailed!&quot;.format(self.name))&#10;&#10;&#10;black_pearl = Ship(&quot;Black Pearl&quot;, 800)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Mountain high&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6961&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Objects of the class &lt;code class=&quot;java&quot;&gt;Mountain&lt;/code&gt; have an attribute &lt;code class=&quot;java&quot;&gt;height&lt;/code&gt; defined in its constructor. The value is initially given in &lt;strong&gt;meters&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Create a method &lt;code class=&quot;java&quot;&gt;convert_height&lt;/code&gt;&amp;nbsp;that converts the height of the mountain from meters to feet according to the&amp;nbsp;formula &amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(Foot = Meter / 0.3048\)&lt;/span&gt;&amp;nbsp;and then returns the calculated value. This method doesn't take any attributes except for&amp;nbsp;&lt;code class=&quot;java&quot;&gt;self&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6931&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6961" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6961" />
                      <option name="index" value="72" />
                      <option name="name" value="Mountain high" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Mountain:&#10;    def __init__(self, name, height):&#10;        self.name = name&#10;        self.height = height&#10;&#10;    # create convert_height here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Hexagon&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6937&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The class &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Hexagon&lt;/code&gt;&lt;/strong&gt; represents the regular hexagons (all sides are equal in length and all angles equal &lt;span class=&quot;math-tex&quot;&gt;\(120 ^ \circ\)&lt;/span&gt;). The only parameter needed to create a regular hexagon is the length of its side&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\(t\)&lt;/span&gt; .&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Create a method &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;get_area&lt;/code&gt;&lt;/strong&gt;that calculates the area of the hexagon according to the formula:&lt;/p&gt; &#10;  &lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\(S = \frac{3\sqrt{3} * t^2}{2}\)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;The name of the method has to be&amp;nbsp;&lt;code class=&quot;java&quot;&gt;get_area&lt;/code&gt;!&amp;nbsp;The method doesn't receive any parameters and it doesn't print anything, just returns the calculated area (rounded to 3 decimals). You do NOT need to call the method in your program!&lt;/p&gt; &#10;  &lt;p&gt;To calculate the square root use the &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;math.sqrt(x)&lt;/code&gt;&lt;/strong&gt; method. (The &lt;code class=&quot;java&quot;&gt;math&lt;/code&gt; module has already been imported.)&lt;/p&gt; &#10;  &lt;p&gt;Nothing else is required (you do NOT need to work with the input).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2.598&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5.4&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;75.760&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6931&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6937" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6937" />
                      <option name="index" value="73" />
                      <option name="name" value="Hexagon" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;1&quot;,&quot;2.598&quot;],[&quot;5.4&quot;,&quot;75.760&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="import math&#10;&#10;&#10;class Hexagon:&#10;    def __init__(self, side_length):&#10;        self.side_length = side_length&#10;&#10;&#10;    # create get_area here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Greetings&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6935&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Create a method &lt;code class=&quot;java&quot;&gt;greet&lt;/code&gt;&amp;nbsp;for the class &lt;code class=&quot;java&quot;&gt;Person&lt;/code&gt; that prints the message &lt;code class=&quot;java&quot;&gt;&quot;Hello, I am {name}!&quot;&lt;/code&gt; .&lt;/p&gt; &#10;  &lt;p&gt;Read the name of the person from the input, create an instance of class &lt;code class=&quot;java&quot;&gt;Person&lt;/code&gt; using this name and then call the &lt;code class=&quot;java&quot;&gt;greet&lt;/code&gt; method you've just created! You can see an example below.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The input format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The name of the person.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;The output format:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;The output of the method &lt;code class=&quot;java&quot;&gt;greet&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;David&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Hello, I am David!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6931&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6935" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6935" />
                      <option name="index" value="74" />
                      <option name="name" value="Greetings" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;David&quot;,&quot;Hello, I am David!&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Person:&#10;    def __init__(self, name):&#10;        self.name = name&#10;&#10;    # create the method greet here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Batman&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8090&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There's a class representing the Gotham's protector &lt;code class=&quot;java&quot;&gt;Batman&lt;/code&gt;. This class uses the standard constructor (no parameters) and has a method &lt;code class=&quot;java&quot;&gt;intimidate_villain&lt;/code&gt; that doesn't take any parameters. This class is already created, you do &lt;em&gt;NOT&lt;/em&gt;&amp;nbsp;need to do that.&lt;/p&gt; &#10;  &lt;p&gt;Your task, on the other hand, is to create an instance of the class &lt;code class=&quot;java&quot;&gt;Batman&lt;/code&gt; and call the method &lt;code class=&quot;java&quot;&gt;intimidate_villain&lt;/code&gt;.&amp;nbsp;Do &lt;em&gt;NOT&lt;/em&gt; print anything.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6931&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8090" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8090" />
                      <option name="index" value="75" />
                      <option name="name" value="Batman" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# create a Batman here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Write a substring&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8835&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Fill the value of the variable &lt;code class=&quot;java&quot;&gt;substring&lt;/code&gt; so that the membership test, such as &lt;code class=&quot;java&quot;&gt;substring in test_string&lt;/code&gt;, would always result in &lt;code class=&quot;java&quot;&gt;True&lt;/code&gt; regardless of the values of different test strings.&lt;/p&gt; &#10;  &lt;p&gt;Just save the appropriate value to &lt;code class=&quot;java&quot;&gt;substring&lt;/code&gt;. Keep in mind that you are not supposed to rename this variable.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/8828&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8835" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8835" />
                      <option name="index" value="76" />
                      <option name="name" value="Write a substring" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# change the value of the variable below&#10;substring = '...'" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Paint&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6986&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Below is the class &lt;code class=&quot;java&quot;&gt;House&lt;/code&gt;. Create a method called &lt;code class=&quot;java&quot;&gt;paint&lt;/code&gt; that takes a color as an argument and paints the house that color (i.e. creates the attribute &lt;code class=&quot;java&quot;&gt;color&lt;/code&gt; with the value of method argument).&lt;/p&gt; &#10;  &lt;p&gt;The method doesn't need to return any values or print any messages.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-317').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-317&quot; style=&quot;display:none;&quot;&gt;&#10;   It's better to add &#10;   &lt;code class=&quot;java&quot;&gt;self.color = None&lt;/code&gt; to &#10;   &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; and update the value in the &#10;   &lt;code class=&quot;java&quot;&gt;paint&lt;/code&gt; method.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6981&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6986" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6986" />
                      <option name="index" value="77" />
                      <option name="name" value="Paint" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class House:&#10;    def __init__(self, floors):&#10;        self.floors = floors&#10;&#10;    # create the method here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;I have friends&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6985&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Below you can see the class &lt;code class=&quot;java&quot;&gt;User&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;This class has two methods: &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;add_friends&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;The &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; method does what any &lt;code class=&quot;java&quot;&gt;__init__&lt;/code&gt; does, while &lt;code class=&quot;java&quot;&gt;add_friends&lt;/code&gt; increases the number of friends that the user has by the value of &lt;strong&gt;n&lt;/strong&gt;. However, the &lt;code class=&quot;java&quot;&gt;add_friends&lt;/code&gt; method has been defined somewhat incorrectly and right now it doesn't do what it's supposed to do.&lt;/p&gt; &#10;  &lt;p&gt;You task is to fix the mistakes in the method.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-538').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-538&quot; style=&quot;display:none;&quot;&gt;&#10;   Pay attention to self.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6981&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6985" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6985" />
                      <option name="index" value="78" />
                      <option name="name" value="I have friends" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class User:&#10;    def __init__(self, username):&#10;        self.username = username&#10;        self.friends = 0&#10;&#10;    # fix this method&#10;    def add_friends(n):&#10;        friends += n&#10;        print(&quot;{} now has {} friends.&quot;.format(username, friends))" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Lightbulb&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6988&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Here's a class &lt;code class=&quot;java&quot;&gt;Lightbulb&lt;/code&gt;. It has only one attribute that represents its state: whether it's on or off.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Create a method &lt;code class=&quot;java&quot;&gt;change_state&lt;/code&gt; that changes the state of the lightbulb. &amp;nbsp;In other words, the method turns the light on or off depending on its current state.&amp;nbsp;The method doesn't take any arguments and prints a corresponding message:&amp;nbsp;&lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Turning the light on&lt;/code&gt;&lt;/strong&gt; if it was off, and &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Turning the light off&lt;/code&gt;&lt;/strong&gt; if it was on.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Inside the method, you are also supposed to change the value of the attribute &lt;code class=&quot;java&quot;&gt;state&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-622').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-622&quot; style=&quot;display:none;&quot;&gt;&#10;   To produce the correct result, inside the &#10;   &lt;code class=&quot;java&quot;&gt;change_state&lt;/code&gt; method check the current state of the lightbulb by accessing the &#10;   &lt;code class=&quot;java&quot;&gt;state&lt;/code&gt; attribute.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6981&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6988" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6988" />
                      <option name="index" value="79" />
                      <option name="name" value="Lightbulb" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Lightbulb:&#10;    def __init__(self):&#10;        self.state = &quot;off&quot;&#10;&#10;    # create method change_state here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Piggy bank&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/6987&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You are given a class &lt;code class=&quot;java&quot;&gt;PiggyBank&lt;/code&gt;that represents an old-school moneybox in the shape of a pig. It has two attributes, &lt;code class=&quot;java&quot;&gt;dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;cents&lt;/code&gt;, and their initial values are passed to the constructor.&lt;/p&gt; &#10;  &lt;p&gt;Create a method &lt;code class=&quot;java&quot;&gt;add_money&lt;/code&gt; with two parameters,&amp;nbsp;&lt;code class=&quot;java&quot;&gt;deposit_dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;deposit_cents&lt;/code&gt;, that increases the sum of money in the piggy bank. To put it another way, in the method, you are supposed to increase the values of &lt;code class=&quot;java&quot;&gt;dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;cents&lt;/code&gt; by &lt;code class=&quot;java&quot;&gt;deposit_dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;deposit_cents&lt;/code&gt;&amp;nbsp;respectively.&lt;/p&gt; &#10;  &lt;p&gt;Parameters &lt;code class=&quot;java&quot;&gt;deposit_dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;deposit_cents&lt;/code&gt; of the &lt;code class=&quot;java&quot;&gt;add_money&lt;/code&gt; method can have any value, but&amp;nbsp;the value of the attribute&amp;nbsp;&lt;code class=&quot;java&quot;&gt;cents&lt;/code&gt; cannot be higher than 99!&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;For example, we start with &lt;code class=&quot;java&quot;&gt;PiggyBank(0, 50)&lt;/code&gt;: 0 dollars and 50 cents. If we try to add another 50 cents, we will have to update the values of both &lt;code class=&quot;java&quot;&gt;dollars&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;cents&lt;/code&gt;, because the attribute &lt;code class=&quot;java&quot;&gt;cents&lt;/code&gt; cannot equal 100. So, the resulting values are 1 dollar and 0 cents.&lt;/p&gt; &#10;  &lt;p&gt;NOTE: you do NOT need to process input. The examples below are for you to test your program. The&amp;nbsp;input shows how many dollars and cents we add to the piggy bank with 1 dollar and 1 cent. The output is the resulting amount of money.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;0 99&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2 0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;0 88&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 89&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;500 500&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;506 1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6981&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/6987" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="6987" />
                      <option name="index" value="80" />
                      <option name="name" value="Piggy bank" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[[&quot;0 99&quot;,&quot;2 0&quot;],[&quot;0 88&quot;,&quot;1 89&quot;],[&quot;500 500&quot;,&quot;506 1&quot;]])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class PiggyBank:&#10;    # create __init__ and add_money methods" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Stack class&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/8924&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;   Whoa! This problem is much more complex than the usual one and requires knowledge of Stack. If you're feeling up to the challenge, brace yourself and good luck! Otherwise, you can skip it by now and return any time later&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt; &#10;  &lt;p&gt;Implement your own Stack class in Python.&lt;/p&gt; &#10;  &lt;p&gt;It should wrap some built-in Python data structure and implement the following methods:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code class=&quot;java&quot;&gt;push(el)&lt;/code&gt; - push a new element &lt;code class=&quot;java&quot;&gt;el&lt;/code&gt; to the stack&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;java&quot;&gt;pop()&lt;/code&gt; - remove and return the last element from the stack&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;java&quot;&gt;peek()&lt;/code&gt; - return the last element without removing it&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;java&quot;&gt;is_empty()&lt;/code&gt; - check if the stack is empty and return True or False&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Upon initialization, the stack must be empty.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/6981&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/8924" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8924" />
                      <option name="index" value="81" />
                      <option name="name" value="Stack class" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Stack():&#10;&#10;    def __init__(self):&#10;        pass&#10;&#10;    def push(self, el):&#10;        pass&#10;&#10;    def pop(self):&#10;        pass&#10;&#10;    def peek(self):&#10;        pass&#10;&#10;    def is_empty(self):&#10;        pass" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;10 puppies&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7145&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You want your program to work in a way that at any given time there can &lt;strong&gt;no more than&lt;/strong&gt; 10 puppies. Define &lt;code class=&quot;java&quot;&gt;__new__&lt;/code&gt; method so that this restriction is placed on the class.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/7139&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7145" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7145" />
                      <option name="index" value="82" />
                      <option name="name" value="10 puppies" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Puppy:&#10;    n_puppies = 0&#10;&#10;    # define __new__" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Printing books&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7144&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Anne is writing a program that deals with the books in a bookstore. She created a class &lt;code class=&quot;java&quot;&gt;Book&lt;/code&gt; and defined all necessary attributes: &lt;code class=&quot;java&quot;&gt;author&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;book_id&lt;/code&gt;. She would like to print out information about books in a concise and uniform way, but she doesn't know how&amp;nbsp;to do that.&lt;/p&gt; &#10;  &lt;p&gt;Help Anne by defining the right method so that she can easily print out information about her books in the following format:&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;{title} by {author}. ${price}. [{book_id}]&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-570').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-570&quot; style=&quot;display:none;&quot;&gt;&#10;   There are two methods that you can define, both work for this problem.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/7139&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7144" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7144" />
                      <option name="index" value="83" />
                      <option name="name" value="Printing books" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Book:&#10;    def __init__(self, author, title, price, book_id):&#10;        self.author = author&#10;        self.title = title&#10;        self.price = price&#10;        self.book_id = book_id&#10;&#10;    # define the necessary method here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Find the mistakes&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7143&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Several magic methods are defined in the class &lt;code class=&quot;java&quot;&gt;MyClass&lt;/code&gt; below. However, there are some mistakes in their definitions.&lt;/p&gt; &#10;  &lt;p&gt;Find the mistakes and fix them so that the code works correctly.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;The user representation should be&amp;nbsp;&lt;code class=&quot;java&quot;&gt;&quot;An object of MyClass&quot;&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-294').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-294&quot; style=&quot;display:none;&quot;&gt;&#10;   Remember, the&amp;nbsp;user representation is defined within the &#10;   &lt;code class=&quot;java&quot;&gt;__str__()&lt;/code&gt;&amp;nbsp;method.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/7139&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7143" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7143" />
                      <option name="index" value="84" />
                      <option name="name" value="Find the mistakes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class MyClass:&#10;    n_objects = 0&#10;&#10;    def __new(self):&#10;        if cls.n_objects &lt; 5:&#10;            instance = object.__new__(cls)&#10;            cls.n_objects += 1&#10;            return instance&#10;&#10;    def __str__(self):&#10;        print(&quot;&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Patients&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/7146&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The class &lt;code class=&quot;java&quot;&gt;Patient&lt;/code&gt; needs both an unambiguous representation for developers and a readable string for users. Here's how they are supposed to look:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;For developers:&amp;nbsp;&lt;strong&gt;Object of the class Patient. name: {name}, last_name: {last_name}, age: {age}&lt;/strong&gt;&lt;/li&gt; &#10;   &lt;li&gt;For users:&amp;nbsp;&lt;strong&gt;{name} {last_name}. {age}&lt;/strong&gt;&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;For example, for object &lt;code class=&quot;java&quot;&gt;john = Patient(&quot;John&quot;, &quot;Doe&quot;, 50)&lt;/code&gt; these representations would respectively look like this:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;strong&gt;Object of the class Patient. name: John, last_name: Doe, age: 50&lt;/strong&gt;&lt;/li&gt; &#10;   &lt;li&gt;&lt;strong&gt;John Doe. 50&lt;/strong&gt;&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Create the necessary methods below.&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;button class=&quot;btn-sm btn-outline-secondary&quot; onclick=&quot;getElementById('hint-692').style.display='inline'&quot;&gt; Hint &lt;/button&gt; &lt;/p&gt;&#10;  &lt;div id=&quot;hint-692&quot; style=&quot;display:none;&quot;&gt;&#10;   Unambiguous representation can be defined within &#10;   &lt;code class=&quot;java&quot;&gt;__repr__&lt;/code&gt;.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/7139&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/7146" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7146" />
                      <option name="index" value="85" />
                      <option name="name" value="Patients" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import check_samples&#10;&#10;if __name__ == '__main__':&#10;    check_samples(samples=[])" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="class Patient:&#10;    def __init__(self, name, last_name, age):&#10;        self.name = name&#10;        self.last_name = last_name&#10;        self.age = age&#10;&#10;    # create methods here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>